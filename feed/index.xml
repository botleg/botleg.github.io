<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Botleg</title>
    <description>Hi, botleg is a blog where you can find tutorials and techniques in web development, devops, databases, cloud computing and anything related to technology.</description>
    <link>https://botleg.com/</link>
    <atom:link href="https://botleg.com/feed" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 19 May 2016 19:42:33 +0530</pubDate>
    <lastBuildDate>Thu, 19 May 2016 19:42:33 +0530</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Building Blue-Green Deployment with Docker</title>
        <author><name>Hanzel Jesheen</name></author>
        <description>&lt;p&gt;Blue-Green Deployment is a strategy to release new version of the app without downtime. The basic idea behind this technique involves using two identical production environments, named &lt;code class=&quot;highlighter-rouge&quot;&gt;Blue&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Green&lt;/code&gt;. At any time, only one of these environment is live and serving the production traffic. The other one is used to test newer version or for roll-back.&lt;/p&gt;

&lt;p&gt;Let us assume that the current live production environment is Blue. When the new version is ready, we can deploy it to the non-production environment - Green. None of our users can see this new version as the live environment is still Blue. We can test the new version from the Green environment now. If this version is ready for release, we switch the production environment to Green and the users can now see the new release. Now the live version in at Green and staging can be done in Blue. If there is some error with the new release in Green, it is easy to roll-back to previous version by just switching the production environment back to Blue. Only thing to note here is that the switching is seamless.&lt;/p&gt;

&lt;p&gt;In this article, we will build a blue-green deployment system with Dockers. We will create and control a cluster of nodes with Docker Swarm. We will build a Blue-Green deployment docker image that creates two environment, each running different versions of same test app. We will also see how to switch the live environment with out Docker image.&lt;/p&gt;

&lt;p&gt;The docker image for Blue-Green deployment is &lt;a href=&quot;https://hub.docker.com/r/hanzel/blue-green/&quot;&gt;hanzel/blue-green&lt;/a&gt; and its code can be found &lt;a href=&quot;https://github.com/botleg/blue-green&quot;&gt;here&lt;/a&gt;. Also, the docker image for the test application is &lt;a href=&quot;https://hub.docker.com/r/hanzel/nginx-html/&quot;&gt;hanzel/nginx-html&lt;/a&gt; and its code can be found &lt;a href=&quot;https://github.com/botleg/nginx-html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;We will be using &lt;a href=&quot;https://docs.docker.com/machine/&quot;&gt;Docker Machine&lt;/a&gt; to create and manage remote hosts as a swarm. With Docker Machine, you can create hosts on your local machine or your cloud provider. Check &lt;a href=&quot;https://docs.docker.com/machine/drivers/&quot;&gt;this link&lt;/a&gt; to see the drivers supported by Docker Machine.&lt;/p&gt;

&lt;p&gt;You need to have the following installed in you local computer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;: version &amp;gt;= 1.10, to support Docker Compose File version 2 and Multi-Host networking.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Machine&lt;/code&gt;: version &amp;gt;= 0.6&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Compose&lt;/code&gt;: version &amp;gt;= 1.6, to support Docker Compose file version 2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can create the virtual hosts in you local system if you have &lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot;&gt;VirtualBox&lt;/a&gt; installed. For this demonstration, I will be using &lt;a href=&quot;https://www.digitalocean.com/&quot;&gt;DigitalOcean&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;creating-the-swarm&quot;&gt;Creating the Swarm&lt;/h2&gt;

&lt;p&gt;The first thing we need to do is to create the Docker Swarm using Docker Machine and set it up. I have explained how to do this in my previous article, &lt;a href=&quot;/stories/load-balancing-with-docker-swarm/&quot;&gt;Load Balancing with Docker Swarm&lt;/a&gt;. Follow the steps from &lt;code class=&quot;highlighter-rouge&quot;&gt;Initial Setup&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;The Swarm&lt;/code&gt; of that article to create and setup the Swarm.&lt;/p&gt;

&lt;p&gt;Once the swarm is setup, you can see the hosts with &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-machine ls&lt;/code&gt; command. The output of this command must look something like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;NAME     ACTIVE      DRIVER         STATE     URL                          SWARM             DOCKER
consul   -           digitalocean   Running   tcp://104.236.235.185:2376                     v1.10.1
master   &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;swarm&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   digitalocean   Running   tcp://159.203.119.37:2376    master &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;master&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   v1.10.1
slave    -           digitalocean   Running   tcp://45.55.185.18:2376      master            v1.10.1 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;test-app&quot;&gt;Test App&lt;/h2&gt;

&lt;p&gt;To demonstrate blue-green deployment, we will deploy different versions of our test app. The docker image for this app is &lt;a href=&quot;https://hub.docker.com/r/hanzel/nginx-html/&quot;&gt;hanzel/nginx-html&lt;/a&gt; and the code for it can be found &lt;a href=&quot;https://github.com/botleg/nginx-html&quot;&gt;here&lt;/a&gt;. The docker image contains the &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt; webserver that serves a static HTML page at port &lt;code class=&quot;highlighter-rouge&quot;&gt;80&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The HTML page contains the current version or tag of the docker image. So the image &lt;code class=&quot;highlighter-rouge&quot;&gt;hanzel/nginx-html:1&lt;/code&gt; serves the HTML page with &lt;code class=&quot;highlighter-rouge&quot;&gt;Version 1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;hanzel/nginx-html:2&lt;/code&gt; serves the HTML page with &lt;code class=&quot;highlighter-rouge&quot;&gt;Version 2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;hanzel/nginx-html:3&lt;/code&gt; serves the HTML page with &lt;code class=&quot;highlighter-rouge&quot;&gt;Version 3&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;consul-template&quot;&gt;Consul Template&lt;/h2&gt;

&lt;p&gt;Now, we are going to build the image that does the blue-green deployment. It uses &lt;a href=&quot;https://www.nginx.com/&quot;&gt;nginx&lt;/a&gt; webserver for load balancing and &lt;a href=&quot;https://github.com/hashicorp/consul-template&quot;&gt;consul-template&lt;/a&gt; to manage nginx configuration dynamically. The docker image for this app is &lt;a href=&quot;https://hub.docker.com/r/hanzel/blue-green/&quot;&gt;hanzel/blue-green&lt;/a&gt; and the code for it can be found &lt;a href=&quot;https://github.com/botleg/blue-green&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If the current live environment is &lt;code class=&quot;highlighter-rouge&quot;&gt;blue&lt;/code&gt;, we can access that at port 80 of the container. The staging environment, &lt;code class=&quot;highlighter-rouge&quot;&gt;green&lt;/code&gt; in this case, can be accessed from the port 8080 of the container. We will be able to switch the live environment anytime with just one command. If we switch the live environment to &lt;code class=&quot;highlighter-rouge&quot;&gt;green&lt;/code&gt;, then we can access the live &lt;code class=&quot;highlighter-rouge&quot;&gt;green&lt;/code&gt; environment at port 80 and staging &lt;code class=&quot;highlighter-rouge&quot;&gt;blue&lt;/code&gt; environment at port 8080. This is how the image facilitates blue-green deployment.&lt;/p&gt;

&lt;p&gt;We have used the &lt;code class=&quot;highlighter-rouge&quot;&gt;registrator&lt;/code&gt; image to register our running docker images to &lt;code class=&quot;highlighter-rouge&quot;&gt;consul&lt;/code&gt;. Now, &lt;code class=&quot;highlighter-rouge&quot;&gt;consul-template&lt;/code&gt; will read these and create custom configuration of &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt;. So, we need to create a template of nginx configuration. This file will be called &lt;code class=&quot;highlighter-rouge&quot;&gt;default.ctmpl&lt;/code&gt; and it looks like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-conf&quot; data-lang=&quot;conf&quot;&gt;{{$&lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;  := &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;BLUE_NAME&quot;&lt;/span&gt;}}
{{$&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt; := &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;GREEN_NAME&quot;&lt;/span&gt;}}
{{$&lt;span class=&quot;n&quot;&gt;live&lt;/span&gt;  := &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/var/live&quot;&lt;/span&gt;}}
&lt;span class=&quot;n&quot;&gt;worker_processes&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;;

&lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;worker_connections&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;1024&lt;/span&gt;;
}

&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt; {
  &lt;span class=&quot;n&quot;&gt;upstream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;least_conn&lt;/span&gt;;
    {{&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; $&lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;}}
    &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; {{.&lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt;}}:{{.&lt;span class=&quot;n&quot;&gt;Port&lt;/span&gt;}} &lt;span class=&quot;n&quot;&gt;max_fails&lt;/span&gt;=&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail_timeout&lt;/span&gt;=&lt;span class=&quot;m&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;=&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;;{{&lt;span class=&quot;n&quot;&gt;else&lt;/span&gt;}}
    &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;127&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;m&quot;&gt;55000&lt;/span&gt;;{{&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;}}
  }

  &lt;span class=&quot;n&quot;&gt;upstream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;green&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;least_conn&lt;/span&gt;;
    {{&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; $&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;}}
    &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; {{.&lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt;}}:{{.&lt;span class=&quot;n&quot;&gt;Port&lt;/span&gt;}} &lt;span class=&quot;n&quot;&gt;max_fails&lt;/span&gt;=&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail_timeout&lt;/span&gt;=&lt;span class=&quot;m&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;=&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;;{{&lt;span class=&quot;n&quot;&gt;else&lt;/span&gt;}}
    &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;127&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;m&quot;&gt;55000&lt;/span&gt;;{{&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;}}
  }

  &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;;

    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; / {
      {{&lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; $&lt;span class=&quot;n&quot;&gt;live&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;blue&quot;&lt;/span&gt;}}
      &lt;span class=&quot;n&quot;&gt;proxy_pass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;://&lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;;
      {{&lt;span class=&quot;n&quot;&gt;else&lt;/span&gt;}}
      &lt;span class=&quot;n&quot;&gt;proxy_pass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;://&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;;
      {{&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;}}
    }
  }

  &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;;

    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; / {
      {{&lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; $&lt;span class=&quot;n&quot;&gt;live&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;blue&quot;&lt;/span&gt;}}
      &lt;span class=&quot;n&quot;&gt;proxy_pass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;://&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;;
      {{&lt;span class=&quot;n&quot;&gt;else&lt;/span&gt;}}
      &lt;span class=&quot;n&quot;&gt;proxy_pass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;://&lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;;
      {{&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;}}
    }
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First of all, we set three variables:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;blue&lt;/code&gt;: The docker service name of the blue environment, taken from environment variable &lt;code class=&quot;highlighter-rouge&quot;&gt;BLUE_NAME&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;green&lt;/code&gt;: The docker service name of the green environment, taken from environment variable &lt;code class=&quot;highlighter-rouge&quot;&gt;GREEN_NAME&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;live&lt;/code&gt;: Current live environment, &lt;code class=&quot;highlighter-rouge&quot;&gt;blue&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;green&lt;/code&gt;, taken from the file &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/live&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will store the current live environment, &lt;code class=&quot;highlighter-rouge&quot;&gt;blue&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;green&lt;/code&gt;, in the file &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/live&lt;/code&gt;. We cannot use environment variable for this beacuse we cannot globally change the value of environment variable from inside a running docker image. So we write the current live environment, while switching, to the file and read its content from inside consul-template.&lt;/p&gt;

&lt;p&gt;Inside the http block, we create an upstream block for &lt;code class=&quot;highlighter-rouge&quot;&gt;blue&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;green&lt;/code&gt;. Inside each of this upstream block, we specify the load balancing configuration for each service. The &lt;code class=&quot;highlighter-rouge&quot;&gt;least_conn&lt;/code&gt; line causes nginx is to route traffic to the least connected instance. We need to generate &lt;code class=&quot;highlighter-rouge&quot;&gt;server&lt;/code&gt; configuration lines for each instance of the service currently running. This is done by the code blocks, &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{range&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{range&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;. The code between these directives are repeated for each instance of the service running with &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{.Address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt; replaced by the address and &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{.Port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt; replaced by its port of that instance. If there is no instance of any service, we have the default &lt;code class=&quot;highlighter-rouge&quot;&gt;server 127.0.0.1:55000;&lt;/code&gt; line that causes an error.&lt;/p&gt;

&lt;p&gt;Next we have the server block that is listening to the port 80. If the value of the &lt;code class=&quot;highlighter-rouge&quot;&gt;live&lt;/code&gt; variable is &lt;code class=&quot;highlighter-rouge&quot;&gt;blue&lt;/code&gt;, this is proxied to the &lt;code class=&quot;highlighter-rouge&quot;&gt;blue&lt;/code&gt; app. If the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;live&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;green&lt;/code&gt;, this is proxied to &lt;code class=&quot;highlighter-rouge&quot;&gt;green&lt;/code&gt; app. So, in essence, the port 80 will point to the live environment.&lt;/p&gt;

&lt;p&gt;Similarly, we have a server block that listens to port 8080. This is proxied to the staging environment. So, if the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;live&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;blue&lt;/code&gt;, this points to the &lt;code class=&quot;highlighter-rouge&quot;&gt;green&lt;/code&gt; app and vice-versa. In any case, the port 80 will give the live environment and port 8080 will give the staging environment.&lt;/p&gt;

&lt;h2 id=&quot;image-scripts&quot;&gt;Image Scripts&lt;/h2&gt;

&lt;p&gt;We need a bash script, that acts as the entry point to this docker image. The file &lt;code class=&quot;highlighter-rouge&quot;&gt;start.sh&lt;/code&gt; looks like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
nginx -g &lt;span class=&quot;s1&quot;&gt;&#39;daemon off;&#39;&lt;/span&gt; &amp;amp;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;nv&quot;&gt;$LIVE&lt;/span&gt; &amp;gt; /var/live
consul-template -consul&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CONSUL_URL&lt;/span&gt; -template&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/templates/default.ctmpl:/etc/nginx/nginx.conf:nginx -s reload&quot;&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first line of the scipt starts up &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt;. Now, we write the value of environment variable &lt;code class=&quot;highlighter-rouge&quot;&gt;LIVE&lt;/code&gt; to the file &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/live&lt;/code&gt;. This environment variable contains the value &lt;code class=&quot;highlighter-rouge&quot;&gt;blue&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;green&lt;/code&gt;, which is the initial live environment.&lt;/p&gt;

&lt;p&gt;We then start up &lt;code class=&quot;highlighter-rouge&quot;&gt;consul-template&lt;/code&gt;. This command need two parameter. The first one is &lt;code class=&quot;highlighter-rouge&quot;&gt;-consul&lt;/code&gt; and it requires the url for consul. We pass an environment variable for this. The next one is called &lt;code class=&quot;highlighter-rouge&quot;&gt;-template&lt;/code&gt; and it consists of three parts seperated by a colon. The first one is the path of the template file. The second is the path where the generated configuration file must be placed. The third is the command that must by run when new configuration is generated. Here, we need to reload nginx.&lt;/p&gt;

&lt;p&gt;The consul-template listens for services and create new configuration file whenever a service starts or stops. The information about this is collected by the registrator services running in each node is our swarm and is stored in consul.&lt;/p&gt;

&lt;p&gt;Now, we need another script to switch the live environment. The script will accept a parameter, either &lt;code class=&quot;highlighter-rouge&quot;&gt;blue&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;green&lt;/code&gt; and change the current live environment to that value. The file &lt;code class=&quot;highlighter-rouge&quot;&gt;switch&lt;/code&gt; looks like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$# &lt;/span&gt;-eq 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;No arguments supplied&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi

if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;blue&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;s2&quot;&gt;&quot;blue&quot;&lt;/span&gt; &amp;gt; /var/live
  &lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;s2&quot;&gt;&quot;green&quot;&lt;/span&gt; &amp;gt; /var/live
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;consul-template -consul&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CONSUL_URL&lt;/span&gt; -template&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/templates/default.ctmpl:/etc/nginx/nginx.conf:nginx -s reload&quot;&lt;/span&gt; -retry 30s -once &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If there is no arguments passed to this scripts, it exits showing the error message, &lt;code class=&quot;highlighter-rouge&quot;&gt;No arguments supplied&lt;/code&gt;. If the parameter is &lt;code class=&quot;highlighter-rouge&quot;&gt;blue&lt;/code&gt;, it is written to the file &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/live&lt;/code&gt;. Else, the value &lt;code class=&quot;highlighter-rouge&quot;&gt;green&lt;/code&gt; is written to that file. This is now the current live environment.&lt;/p&gt;

&lt;p&gt;Finally, we run the &lt;code class=&quot;highlighter-rouge&quot;&gt;consul-template&lt;/code&gt; command with the &lt;code class=&quot;highlighter-rouge&quot;&gt;once&lt;/code&gt; parameter. This causes the consul-template to create new nginx configuration based on the new value in &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/live&lt;/code&gt; and reload nginx. This will switch the current live environment. As we have used the &lt;code class=&quot;highlighter-rouge&quot;&gt;once&lt;/code&gt; parameter, the new configuration in made only once and consul-template will not listen for new services. For that, we have a consul-template running from our &lt;code class=&quot;highlighter-rouge&quot;&gt;start.sh&lt;/code&gt; file.&lt;/p&gt;

&lt;h2 id=&quot;blue-green-image&quot;&gt;Blue-Green Image&lt;/h2&gt;

&lt;p&gt;Save these three files, &lt;code class=&quot;highlighter-rouge&quot;&gt;default.ctmpl&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;start.sh&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;switch&lt;/code&gt;, in folder named &lt;code class=&quot;highlighter-rouge&quot;&gt;files&lt;/code&gt;. In its parent, we can have the &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; contains information on how to build this docker image and will look like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;FROM nginx:alpine

RUN apk add --no-cache --virtual unzip
ADD https://releases.hashicorp.com/consul-template/0.14.0/consul-template_0.14.0_linux_amd64.zip /usr/bin/
RUN unzip /usr/bin/consul-template_0.14.0_linux_amd64.zip -d /usr/local/bin

COPY files/s&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; /bin/
RUN chmod +x /bin/switch /bin/start.sh
COPY files/default.ctmpl /templates/

ENV LIVE blue
ENV BLUE_NAME blue
ENV GREEN_NAME green

EXPOSE 80 8080
ENTRYPOINT &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/bin/start.sh&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This dockerfile uses &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx:alpine&lt;/code&gt; as the base and installs unzip and consul-template into it. It then copies the &lt;code class=&quot;highlighter-rouge&quot;&gt;start.sh&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;switch&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;default.ctmpl&lt;/code&gt; to required locations and make the scripts executable.&lt;/p&gt;

&lt;p&gt;We also set the default values for following environment variables:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LIVE&lt;/code&gt;: The initial live environment. Set to &lt;code class=&quot;highlighter-rouge&quot;&gt;blue&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BLUE_NAME&lt;/code&gt;: The docker service name of blue environment. Set to &lt;code class=&quot;highlighter-rouge&quot;&gt;blue&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GREEN_NAME&lt;/code&gt;: The docker service name of green environment. Set to &lt;code class=&quot;highlighter-rouge&quot;&gt;green&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We expose the port 80 and 8080. The &lt;code class=&quot;highlighter-rouge&quot;&gt;start.sh&lt;/code&gt; file will be the entry point to this image.&lt;/p&gt;

&lt;h2 id=&quot;testing-blue-green-deployment&quot;&gt;Testing Blue-Green deployment&lt;/h2&gt;

&lt;p&gt;To test blue-green deployment, we will use the following &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-conf&quot; data-lang=&quot;conf&quot;&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&#39;2&#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;:
  &lt;span class=&quot;n&quot;&gt;bg&lt;/span&gt;:
    &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;hanzel&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;container_name&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;bg&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ports&lt;/span&gt;:
      - &lt;span class=&quot;s2&quot;&gt;&quot;80:80&quot;&lt;/span&gt;
      - &lt;span class=&quot;s2&quot;&gt;&quot;8080:8080&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;:
      - &lt;span class=&quot;n&quot;&gt;constraint&lt;/span&gt;:&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;==&lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;
      - &lt;span class=&quot;n&quot;&gt;CONSUL_URL&lt;/span&gt;=${&lt;span class=&quot;n&quot;&gt;KV_IP&lt;/span&gt;}:&lt;span class=&quot;m&quot;&gt;8500&lt;/span&gt;
      - &lt;span class=&quot;n&quot;&gt;BLUE_NAME&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;
      - &lt;span class=&quot;n&quot;&gt;GREEN_NAME&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;
      - &lt;span class=&quot;n&quot;&gt;LIVE&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;depends_on&lt;/span&gt;:
      - &lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;
      - &lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;networks&lt;/span&gt;:
      - &lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;:
    &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;hanzel&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;nginx&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;:&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ports&lt;/span&gt;:
      - &lt;span class=&quot;s2&quot;&gt;&quot;80&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;:
      - &lt;span class=&quot;n&quot;&gt;SERVICE_80_NAME&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;networks&lt;/span&gt;:
      - &lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;:
    &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;hanzel&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;nginx&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;:&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ports&lt;/span&gt;:
      - &lt;span class=&quot;s2&quot;&gt;&quot;80&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;:
      - &lt;span class=&quot;n&quot;&gt;SERVICE_80_NAME&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;networks&lt;/span&gt;:
      - &lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;networks&lt;/span&gt;:
  &lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;:
    &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;overlay&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We are using the version 2 of docker-compose file, with three services in an overlay network named &lt;code class=&quot;highlighter-rouge&quot;&gt;blue-green&lt;/code&gt;. We have two versions of &lt;code class=&quot;highlighter-rouge&quot;&gt;hanzel/nginx-html&lt;/code&gt; image running as blue and green services. We also have &lt;code class=&quot;highlighter-rouge&quot;&gt;hanzel/blue-green&lt;/code&gt; image running for blue-green deployment.&lt;/p&gt;

&lt;p&gt;The first service is the blue service, named &lt;code class=&quot;highlighter-rouge&quot;&gt;blue&lt;/code&gt;. The image used is version 1 of &lt;code class=&quot;highlighter-rouge&quot;&gt;hanzel/nginx-html&lt;/code&gt;. We have mapped the port 80 of the container to some port in the host. We have set the environment variable &lt;code class=&quot;highlighter-rouge&quot;&gt;SERVICE_80_NAME&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;blue&lt;/code&gt;. This causes the &lt;code class=&quot;highlighter-rouge&quot;&gt;registrator&lt;/code&gt; to register this service into consul named as &lt;code class=&quot;highlighter-rouge&quot;&gt;blue&lt;/code&gt;. This is the initial live environment.&lt;/p&gt;

&lt;p&gt;Similarly, we have the green service, named &lt;code class=&quot;highlighter-rouge&quot;&gt;green&lt;/code&gt;. The image used here is version 2 of the &lt;code class=&quot;highlighter-rouge&quot;&gt;hanzel/nginx-html&lt;/code&gt;. The environment variable &lt;code class=&quot;highlighter-rouge&quot;&gt;SERVICE_80_NAME&lt;/code&gt; is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;green&lt;/code&gt; so that &lt;code class=&quot;highlighter-rouge&quot;&gt;registrator&lt;/code&gt; will register it named as &lt;code class=&quot;highlighter-rouge&quot;&gt;green&lt;/code&gt;. This is the initial statging environment.&lt;/p&gt;

&lt;p&gt;Finally, we have the &lt;code class=&quot;highlighter-rouge&quot;&gt;bg&lt;/code&gt; service with &lt;code class=&quot;highlighter-rouge&quot;&gt;hanzel/blue-green&lt;/code&gt; image. You can also build the image we just made in the previous section for this service by replacing the line &lt;code class=&quot;highlighter-rouge&quot;&gt;image: hanzel/blue-green&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;build: .&lt;/code&gt; and placing this file along with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; we made in the previous section.&lt;/p&gt;

&lt;p&gt;We map the ports &lt;code class=&quot;highlighter-rouge&quot;&gt;80&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;8080&lt;/code&gt; of the container to that of the host. We also need to set the following environment variables.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;constraint:node&lt;/code&gt;: The name of the node where this service should run. We want this service to always run on the &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; node.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CONSUL_URL&lt;/code&gt;: The url endpoint of consul. We have set it to &lt;code class=&quot;highlighter-rouge&quot;&gt;${KV_IP}:8500&lt;/code&gt;, where &lt;code class=&quot;highlighter-rouge&quot;&gt;KV_IP&lt;/code&gt; is the environment variable we have set while making the swarm.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BLUE_NAME&lt;/code&gt;: The docker service name of the blue image. Set to &lt;code class=&quot;highlighter-rouge&quot;&gt;blue&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GREEN_NAME&lt;/code&gt;: The docker service name of the green image. Set to &lt;code class=&quot;highlighter-rouge&quot;&gt;green&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LIVE&lt;/code&gt;: The initial live environment, blue or green. Set to &lt;code class=&quot;highlighter-rouge&quot;&gt;blue&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can start the services with the following command.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker-compose up -d&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will start up a single instance of each of these three services. We can scale the blue and green services to 3 instances each with the following command.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker-compose scale &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3 &lt;span class=&quot;nv&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These will create two new instances for blue and green service. You can see the running services of docker-compose with the &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose ps&lt;/code&gt; command. The output of the command will look something like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Name          Command                State                               Ports
----------------------------------------------------------------------------------------------------------
&lt;span class=&quot;nb&quot;&gt;bg&lt;/span&gt;            /bin/start.sh          Up      443/tcp, 45.55.185.18:80-&amp;gt;80/tcp, 45.55.185.18:8080-&amp;gt;8080/tcp
tmp_blue_1    nginx -g daemon off;   Up      443/tcp, 45.55.185.18:32777-&amp;gt;80/tcp
tmp_blue_2    nginx -g daemon off;   Up      443/tcp, 159.203.119.37:32769-&amp;gt;80/tcp
tmp_blue_3    nginx -g daemon off;   Up      443/tcp, 45.55.185.18:32778-&amp;gt;80/tcp
tmp_green_1   nginx -g daemon off;   Up      443/tcp, 159.203.119.37:32768-&amp;gt;80/tcp
tmp_green_2   nginx -g daemon off;   Up      443/tcp, 45.55.185.18:32779-&amp;gt;80/tcp
tmp_green_3   nginx -g daemon off;   Up      443/tcp, 159.203.119.37:32770-&amp;gt;80/tcp&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can see the live production environment from the url given by the command, &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose port bg 80&lt;/code&gt;. You will get some IP address like &lt;code class=&quot;highlighter-rouge&quot;&gt;45.55.185.18:80&lt;/code&gt;, which is the IP for the &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; node. Go to this url and we can see the live environment, currently &lt;code class=&quot;highlighter-rouge&quot;&gt;blue&lt;/code&gt;, showing &lt;code class=&quot;highlighter-rouge&quot;&gt;Version 1&lt;/code&gt;. You can see the staging environment, currently &lt;code class=&quot;highlighter-rouge&quot;&gt;green&lt;/code&gt;, by going to port &lt;code class=&quot;highlighter-rouge&quot;&gt;8080&lt;/code&gt; of the same IP. That will be &lt;code class=&quot;highlighter-rouge&quot;&gt;45.55.185.18:8080&lt;/code&gt; in this case. This will show you &lt;code class=&quot;highlighter-rouge&quot;&gt;Version 2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, the users can see the version 1 of your app and only you can see version 2. You can test the new version and if you are satisfied, you can switch the live environment to &lt;code class=&quot;highlighter-rouge&quot;&gt;green&lt;/code&gt;. To do this, use the following command.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker &lt;span class=&quot;nb&quot;&gt;exec bg &lt;/span&gt;switch green&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, the live version is &lt;code class=&quot;highlighter-rouge&quot;&gt;green&lt;/code&gt; and at port 80, you can see version 2 and at port 8080, you can see version 1. You can see the new nginx configuration with the command, &lt;code class=&quot;highlighter-rouge&quot;&gt;docker exec bg cat /etc/nginx/nginx.conf&lt;/code&gt;. The output of this command will look like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nginx&quot; data-lang=&quot;nginx&quot;&gt;&lt;span class=&quot;k&quot;&gt;worker_processes&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;worker_connections&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;upstream&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;blue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;least_conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kn&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;10.132.12.95&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32769&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;max_fails=3&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fail_timeout=60&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;weight=1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;10.132.35.39&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32777&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;max_fails=3&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fail_timeout=60&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;weight=1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;10.132.35.39&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32778&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;max_fails=3&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fail_timeout=60&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;weight=1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;upstream&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;green&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;least_conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kn&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;10.132.12.95&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32768&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;max_fails=3&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fail_timeout=60&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;weight=1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;10.132.12.95&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32770&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;max_fails=3&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fail_timeout=60&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;weight=1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;10.132.35.39&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32779&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;max_fails=3&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fail_timeout=60&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;weight=1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kn&quot;&gt;proxy_pass&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kn&quot;&gt;proxy_pass&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can always check the current live environment using the command, &lt;code class=&quot;highlighter-rouge&quot;&gt;docker exec bg cat /var/live&lt;/code&gt;. Now, &lt;code class=&quot;highlighter-rouge&quot;&gt;blue&lt;/code&gt; is the staging environment and we can check version 3 there. So in the blue service of the &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; file, change the line &lt;code class=&quot;highlighter-rouge&quot;&gt;image: hanzel/nginx-html:1&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;image: hanzel/nginx-html:3&lt;/code&gt;. To update the blue service, run the following command.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker-compose up -d blue&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;All three instances for &lt;code class=&quot;highlighter-rouge&quot;&gt;blue&lt;/code&gt; services will be upgraded from version 1 to version 3 now. The staging environment at port &lt;code class=&quot;highlighter-rouge&quot;&gt;8080&lt;/code&gt; of the &lt;code class=&quot;highlighter-rouge&quot;&gt;bg&lt;/code&gt; service will now show &lt;code class=&quot;highlighter-rouge&quot;&gt;Version 3&lt;/code&gt;. You can check this version and if it is okay for production, switch the live environment to &lt;code class=&quot;highlighter-rouge&quot;&gt;blue&lt;/code&gt; with the following command.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker &lt;span class=&quot;nb&quot;&gt;exec bg &lt;/span&gt;switch blue&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, live environment at port &lt;code class=&quot;highlighter-rouge&quot;&gt;80&lt;/code&gt; will show &lt;code class=&quot;highlighter-rouge&quot;&gt;Version 3&lt;/code&gt; and the staging environment at port &lt;code class=&quot;highlighter-rouge&quot;&gt;8080&lt;/code&gt; will show &lt;code class=&quot;highlighter-rouge&quot;&gt;Version 2&lt;/code&gt;. You can repeat this process for newer versions.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article, we have seen how to build a blue-green deployment system with Dockers to release new version of the app without downtime. We have made a docker image to implement this blue-green deployment and tested it on an app deployed with Docker Swarm.&lt;/p&gt;

&lt;p&gt;Once you are done, the services can be stopped and the hosts removed with the following commands.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker-compose down
docker-machine stop consul master slave
docker-machine rm consul master slave&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Sun, 10 Apr 2016 23:30:00 +0530</pubDate>
        <link>https://botleg.com/stories/blue-green-deployment-with-docker/</link>
        <guid isPermaLink="true">https://botleg.com/stories/blue-green-deployment-with-docker/</guid>
        
        <category>blue-green</category>
        
        <category>live</category>
        
        <category>staging</category>
        
        <category>docker</category>
        
        <category>swarm</category>
        
        <category>registrator</category>
        
        <category>nginx</category>
        
        <category>consul</category>
        
        <category>consul-template</category>
        
        <category>overlay</category>
        
        <category>digitalocean</category>
        
        <category>compose</category>
        
        <category>machine</category>
        
        <category>bash</category>
        
        <category>Dockerfile</category>
        
        
        <category>devops</category>
        
      </item>
    
      <item>
        <title>Load Balancing with Docker Swarm</title>
        <author><name>Hanzel Jesheen</name></author>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Docker Swarm is native clustering for Docker. It turns a pool of Docker hosts into a single, virtual Docker host.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Docker Swarm lets us group a number of hosts into a cluster and distribute the docker images among these hosts. So, the workload in divided by the nodes in the swarm. In this article, we are going to deploy and scale an application. We will also deploy a load balancer that will distribute the traffic to different instances of the docker images in the swarm. You can follow along this article with only your terminal.&lt;/p&gt;

&lt;p&gt;In my &lt;a href=&quot;/stories/orchestrate-docker-containers-with-tutum/&quot;&gt;previous article&lt;/a&gt;, we discussed load balancing with a docker orchestration tool, &lt;a href=&quot;https://cloud.docker.com/&quot;&gt;Docker Cloud&lt;/a&gt; (previously known as &lt;a href=&quot;https://www.tutum.co/&quot;&gt;Tutum&lt;/a&gt;). Now, we do the same thing with Docker Swarm. The docker image for load balancer is &lt;a href=&quot;https://hub.docker.com/r/hanzel/load-balancing-swarm/&quot;&gt;hanzel/load-balancing-swarm&lt;/a&gt; and its code can be found &lt;a href=&quot;https://github.com/botleg/load-balancing-swarm&quot;&gt;here&lt;/a&gt;. We are load balancing a Node.js application with Redis as the database. Also, the docker image for the Node.js application is &lt;a href=&quot;https://hub.docker.com/r/hanzel/tutum-nodejs-redis/&quot;&gt;hanzel/tutum-nodejs-redis&lt;/a&gt; and its code can be found &lt;a href=&quot;https://github.com/botleg/tutum-nodejs-redis&quot;&gt;here&lt;/a&gt;. For Redis, we use its official docker image - &lt;a href=&quot;https://hub.docker.com/_/redis/&quot;&gt;redis&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;We will be using &lt;a href=&quot;https://docs.docker.com/machine/&quot;&gt;Docker Machine&lt;/a&gt; to create and manage remote hosts as a swarm. With Docker Machine, you can create hosts on your local machine or your cloud provider. Check &lt;a href=&quot;https://docs.docker.com/machine/drivers/&quot;&gt;this link&lt;/a&gt; to see the drivers supported by Docker Machine.&lt;/p&gt;

&lt;p&gt;You need to have the following installed in you local computer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;: version &amp;gt;= 1.10, to support Docker Compose File version 2 and Multi-Host networking.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Machine&lt;/code&gt;: version &amp;gt;= 0.6&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Compose&lt;/code&gt;: version &amp;gt;= 1.6, to support Docker Compose file version 2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can create the virtual hosts in you local system if you have &lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot;&gt;VirtualBox&lt;/a&gt; installed. For this demonstration, I will be using &lt;a href=&quot;https://docs.docker.com/machine/&quot;&gt;DigitalOcean&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;initial-setup&quot;&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;Before we start using Docker Machine, we need to setup some environment variables. You can see more about these environment variables from &lt;a href=&quot;https://docs.docker.com/machine/drivers/&quot;&gt;here&lt;/a&gt;. Create a Personal Access Token from DigitalOcean. If you need help for that, check &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-use-the-digitalocean-api-v2#how-to-generate-a-personal-access-token&quot;&gt;this&lt;/a&gt; out. Your token will look something like &lt;code class=&quot;highlighter-rouge&quot;&gt;ed1d3d280778fe0e86b7a3e0fea065cf799fce3e575c722458897354e59de0b0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We will use &lt;code class=&quot;highlighter-rouge&quot;&gt;Debian 8&lt;/code&gt; as ths OS of the nodes and enable private networking, so that the hosts in the swarm can communicate with each other. Set these environment variables with the following bash commands.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DIGITALOCEAN_ACCESS_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;YOUR_DIGITALOCEAN_TOKEN
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DIGITALOCEAN_PRIVATE_NETWORKING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DIGITALOCEAN_IMAGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;debian-8-x64&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;consul&quot;&gt;Consul&lt;/h2&gt;

&lt;p&gt;To create a Swarm, we need access to a Key-Value store for service discovery and to store configuration. Swarm supports Consul, Etcd, and ZooKeeper. We will be using &lt;a href=&quot;https://www.consul.io/&quot;&gt;Consul&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We will be creating a host for running Consul alone. It will not be a part of the swarm. So we can create a host named &lt;code class=&quot;highlighter-rouge&quot;&gt;consul&lt;/code&gt; first.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker-machine create &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -d digitalocean &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  consul&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This command will create a host in DigitalOcean and provision it. You can use the command &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-machine ssh consul&lt;/code&gt;, to ssh into this host. We will store the private IP of this host as &lt;code class=&quot;highlighter-rouge&quot;&gt;KV_IP&lt;/code&gt; environment variable with the following command.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KV_IP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker-machine ssh consul &lt;span class=&quot;s1&quot;&gt;&#39;ifconfig eth1 | grep &quot;inet addr:&quot; | cut -d: -f2 | cut -d&quot; &quot; -f1&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We need to connect out docker client to this host and then run &lt;a href=&quot;https://hub.docker.com/r/progrium/consul/&quot;&gt;progrium/consul&lt;/a&gt; image there.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker-machine env consul&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

docker run -d &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -p &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KV_IP&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:8500:8500 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -h consul &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --restart always &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  gliderlabs/consul-server -bootstrap&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This command will pull and deploy the image in &lt;code class=&quot;highlighter-rouge&quot;&gt;consul&lt;/code&gt; host.&lt;/p&gt;

&lt;h2 id=&quot;the-swarm&quot;&gt;The Swarm&lt;/h2&gt;

&lt;p&gt;Now, we will create the swarm. A Docker swarm need a master node and an arbitrary number of ordinary nodes. The swarm master is named &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; and we will create this now.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker-machine create &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -d digitalocean &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --swarm &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --swarm-master &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --swarm-discovery&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;consul://&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KV_IP&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:8500&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --engine-opt&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cluster-store=consul://&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KV_IP&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:8500&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --engine-opt&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cluster-advertise=eth1:2376&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  master&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;swarm-master&lt;/code&gt; flag idetifies this node as the swarm master. We also need to provide the consul endpoint as the &lt;code class=&quot;highlighter-rouge&quot;&gt;swarm-discovery&lt;/code&gt; flag. For us, this is &lt;code class=&quot;highlighter-rouge&quot;&gt;consul://${KV_IP}:8500&lt;/code&gt;. We will set the private IP for this host as &lt;code class=&quot;highlighter-rouge&quot;&gt;MASTER_IP&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MASTER_IP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker-machine ssh master &lt;span class=&quot;s1&quot;&gt;&#39;ifconfig eth1 | grep &quot;inet addr:&quot; | cut -d: -f2 | cut -d&quot; &quot; -f1&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can now create any number of nodes in this swarm. For this example, we will have only one other node in the swarm and it is named &lt;code class=&quot;highlighter-rouge&quot;&gt;slave&lt;/code&gt;. We will create this host and set its private IP as &lt;code class=&quot;highlighter-rouge&quot;&gt;SLAVE_IP&lt;/code&gt; with the following commands.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker-machine create &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -d digitalocean &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --swarm &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --swarm-discovery&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;consul://&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KV_IP&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:8500&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --engine-opt&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cluster-store=consul://&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KV_IP&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:8500&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --engine-opt&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cluster-advertise=eth1:2376&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  slave

&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SLAVE_IP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker-machine ssh slave &lt;span class=&quot;s1&quot;&gt;&#39;ifconfig eth1 | grep &quot;inet addr:&quot; | cut -d: -f2 | cut -d&quot; &quot; -f1&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can create more nodes in the swarm by repeating these commands by just changing the hostname. We also need to have a registrator service running in each of these hosts to keep track of all services running in each host. The version 6 of &lt;code class=&quot;highlighter-rouge&quot;&gt;gliderlabs/registrator&lt;/code&gt; image is used for this.&lt;/p&gt;

&lt;p&gt;We need to connect our client to each of these hosts and run the registrator image.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker-machine env master&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

docker run -d &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;registrator &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -h &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MASTER_IP&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --volume&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/run/docker.sock:/tmp/docker.sock &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  gliderlabs/registrator:v6 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  consul://&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KV_IP&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:8500

&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker-machine env slave&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

docker run -d &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;registrator &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -h &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SLAVE_IP&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --volume&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/run/docker.sock:/tmp/docker.sock &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  gliderlabs/registrator:v6 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  consul://&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KV_IP&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:8500&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This service will keep track of the information like IP and PORT of each service running in the host and saves it to consul. We can now connect the docker client to the swarm. For this, we use &lt;code class=&quot;highlighter-rouge&quot;&gt;-swarm&lt;/code&gt; parameter with the swarm master.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker-machine env -swarm master&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can see all the hosts created with &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-machine&lt;/code&gt; with the command &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-machine ls&lt;/code&gt;. The output of this command must look something like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;NAME     ACTIVE      DRIVER         STATE     URL                          SWARM             DOCKER
consul   -           digitalocean   Running   tcp://104.131.126.139:2376                     v1.10.1
master   &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;swarm&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   digitalocean   Running   tcp://45.55.48.84:2376       master &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;master&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   v1.10.1
slave    -           digitalocean   Running   tcp://104.131.177.65:2376    master            v1.10.1 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;docker-compose&quot;&gt;Docker Compose&lt;/h2&gt;

&lt;p&gt;We have set up the swarm, it is ready for deployment. For this demonstration, we will be deploying multiple instances of Node.js application with a single instance of Redis as the database. The code for this Node.js application can be found &lt;a href=&quot;https://github.com/botleg/tutum-nodejs-redis&quot;&gt;here&lt;/a&gt;. It just lets us set the read values from redis. The docker images used for this is &lt;a href=&quot;https://hub.docker.com/r/hanzel/tutum-nodejs-redis/&quot;&gt;hanzel/tutum-nodejs-redis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Docker Compose allows us to write the configuration file for this deployment. We are going to use the Docker Compose File version 2, which allows us to define configuration about the network and volumes used for the deployment in &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; file. You can know more about Version 2 of compose file &lt;a href=&quot;https://docs.docker.com/compose/compose-file/#version-2&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; file looks like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-conf&quot; data-lang=&quot;conf&quot;&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&#39;2&#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;:
  &lt;span class=&quot;n&quot;&gt;web&lt;/span&gt;:
    &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;hanzel&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;tutum&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;nodejs&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ports&lt;/span&gt;:
      - &lt;span class=&quot;s2&quot;&gt;&quot;4000&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;:
      - &lt;span class=&quot;n&quot;&gt;APP_PORT&lt;/span&gt;=&lt;span class=&quot;m&quot;&gt;4000&lt;/span&gt;
      - &lt;span class=&quot;n&quot;&gt;REDIS_IP&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;
      - &lt;span class=&quot;n&quot;&gt;REDIS_PORT&lt;/span&gt;=&lt;span class=&quot;m&quot;&gt;6379&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;depends_on&lt;/span&gt;:
      - &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;networks&lt;/span&gt;:
      - &lt;span class=&quot;n&quot;&gt;back&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;tier&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;:
    &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;container_name&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; --&lt;span class=&quot;n&quot;&gt;appendonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yes&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;volumes&lt;/span&gt;:
      - &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;:/&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;networks&lt;/span&gt;:
      - &lt;span class=&quot;n&quot;&gt;back&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;tier&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;volumes&lt;/span&gt;:
  &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;:
    &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;networks&lt;/span&gt;:
  &lt;span class=&quot;n&quot;&gt;back&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;tier&lt;/span&gt;:
    &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;overlay&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first service is &lt;code class=&quot;highlighter-rouge&quot;&gt;web&lt;/code&gt; and it contains the image &lt;code class=&quot;highlighter-rouge&quot;&gt;hanzel/tutum-nodejs-redis&lt;/code&gt;, which is the node.js application. We are pulishing the port 4000 inside the container. It will be mapped to some port of the host. We need to setup some environment variables:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;APP_PORT&lt;/code&gt;: Port to run the Node.js application.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;REDIS_IP&lt;/code&gt;: The IP of the redis instance.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;REDIS_PORT&lt;/code&gt;: The PORT of the redis instance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The second service is the official &lt;code class=&quot;highlighter-rouge&quot;&gt;redis&lt;/code&gt; image. For persistant data storage, we are creating a data volumes named &lt;code class=&quot;highlighter-rouge&quot;&gt;redis-data&lt;/code&gt;. This volume is of the type &lt;code class=&quot;highlighter-rouge&quot;&gt;local&lt;/code&gt;, so the data is stored in the local host system.&lt;/p&gt;

&lt;p&gt;The services in the same network are linked. Here, both these services are in the &lt;code class=&quot;highlighter-rouge&quot;&gt;back-tier&lt;/code&gt; network which is of the type &lt;code class=&quot;highlighter-rouge&quot;&gt;overlay&lt;/code&gt;. The overlay network allow &lt;code class=&quot;highlighter-rouge&quot;&gt;multi-host networking&lt;/code&gt;, this allows the service to be linked even if the these are in different hosts.&lt;/p&gt;

&lt;p&gt;Save this code as &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; and save it in a folder. Make sure that your docker client is connected to the swarm with &lt;code class=&quot;highlighter-rouge&quot;&gt;eval $(docker-machine env -swarm master)&lt;/code&gt; command. Now open up the terminal in this folder and start the services using the following command.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker-compose up -d&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will start up the services, which are distributed across the different hosts in the swarm. You can see details about the running services with the command &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose ps&lt;/code&gt;. The output must look something like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Name                       Command                          State     Ports           
-------------------------------------------------------------------------------------------------
loadbalancingswarm_web_1   npm start                        Up        45.55.48.84:32768-&amp;gt;4000/tcp
redis                      /entrypoint.sh redis-serve ...   Up        6379/tcp                   &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this case, you can see the app running at &lt;code class=&quot;highlighter-rouge&quot;&gt;45.55.48.84:32768&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;load-balancer&quot;&gt;Load Balancer&lt;/h2&gt;

&lt;p&gt;We have a single instance of the app running. We need to now implement a load balancer that can distribute the traffic across all the instances of this service. As we increase and decrease the instances of the service, we need to automatically update the load balancer. The code for the load balancer can be found &lt;a href=&quot;https://github.com/botleg/load-balancing-swarm&quot;&gt;here&lt;/a&gt; and the docker image for this is &lt;a href=&quot;https://hub.docker.com/r/hanzel/load-balancing-swarm/&quot;&gt;hanzel/load-balancing-swarm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We will use &lt;a href=&quot;https://www.nginx.com/&quot;&gt;nginx&lt;/a&gt; for load balancing and &lt;a href=&quot;https://github.com/hashicorp/consul-template&quot;&gt;consul-template&lt;/a&gt; to manage nginx configuration. You can also use HAproxy as the load balancer, the process is similar.&lt;/p&gt;

&lt;p&gt;First, we need to create a template file for nginx configuration. This file is filled with the service information by consul-template and forms the configuration for nginx. The file &lt;code class=&quot;highlighter-rouge&quot;&gt;default.ctmpl&lt;/code&gt; looks like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-conf&quot; data-lang=&quot;conf&quot;&gt;{{$&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; := &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;APP_NAME&quot;&lt;/span&gt;}}

&lt;span class=&quot;n&quot;&gt;upstream&lt;/span&gt; {{&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; $&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;}} {
    &lt;span class=&quot;n&quot;&gt;least_conn&lt;/span&gt;;
    {{&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; $&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;}}
    &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; {{.&lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt;}}:{{.&lt;span class=&quot;n&quot;&gt;Port&lt;/span&gt;}} &lt;span class=&quot;n&quot;&gt;max_fails&lt;/span&gt;=&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail_timeout&lt;/span&gt;=&lt;span class=&quot;m&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;=&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;;{{&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;}}
}

&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;;

    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; / {
        &lt;span class=&quot;n&quot;&gt;proxy_pass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;://{{&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; $&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;}};
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We will set variable &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; with the value of environment variable &lt;code class=&quot;highlighter-rouge&quot;&gt;APP_NAME&lt;/code&gt;. We create a upstream named with the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;least_conn&lt;/code&gt; line causes nginx is to route traffic to the least connected instance. We need to generate &lt;code class=&quot;highlighter-rouge&quot;&gt;server&lt;/code&gt; configuration lines for each instance of the service currently running. This is done by the code block, &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{range&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;. The code between these directives are repeated for each instance of the service running with &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{.Address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt; replaced by the address and &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{.Port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt; replaced by its port of that instance. Next we have the server block that is listening to the port 80. This will create a reverse proxy to the upstream we just created.&lt;/p&gt;

&lt;p&gt;We need a bash script, that acts as the entry point to this docker image. The file &lt;code class=&quot;highlighter-rouge&quot;&gt;start.sh&lt;/code&gt; looks like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
service nginx start
consul-template -consul&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CONSUL_URL&lt;/span&gt; -template&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/templates/default.ctmpl:/etc/nginx/conf.d/default.conf:service nginx reload&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This script starts up nginx service. We then start up &lt;code class=&quot;highlighter-rouge&quot;&gt;consul-template&lt;/code&gt;. This command need two parameter. The first one is &lt;code class=&quot;highlighter-rouge&quot;&gt;-consul&lt;/code&gt; and it requires the url for consul. We pass an environment variable for this. The next one is called &lt;code class=&quot;highlighter-rouge&quot;&gt;-template&lt;/code&gt; and it consists of three parts seperated by a colon. The first one is the path of the template file. The second is the path where the generated configuration file must be placed. The third is the command that must by run when new configuration is generated. Here, we need to reload nginx.&lt;/p&gt;

&lt;p&gt;The consul-template will create new configuration file whenever a service starts or stops. The information about this is collected by the registrator services running in each node is our swarm and is stored in consul.&lt;/p&gt;

&lt;p&gt;Save these two files in folder named &lt;code class=&quot;highlighter-rouge&quot;&gt;files&lt;/code&gt; and in its parent, we can have the &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; contains information on how to build this docker image.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;FROM nginx:latest

RUN apt-get update &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y unzip

ADD files/start.sh /bin/start.sh
RUN chmod +x /bin/start.sh
ADD files/default.ctmpl /templates/default.ctmpl

ADD https://releases.hashicorp.com/consul-template/0.12.2/consul-template_0.12.2_linux_amd64.zip /usr/bin/
RUN unzip /usr/bin/consul-template_0.12.2_linux_amd64.zip -d /usr/local/bin

EXPOSE 80
ENTRYPOINT &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/bin/start.sh&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This dockerfile uses &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt; as the base and installs consul-template into it. It then copies the &lt;code class=&quot;highlighter-rouge&quot;&gt;start.sh&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;default.ctmpl&lt;/code&gt; to required location. Finally, it exposes the port 80 and sets &lt;code class=&quot;highlighter-rouge&quot;&gt;start.sh&lt;/code&gt; as the entry point of the image.&lt;/p&gt;

&lt;h2 id=&quot;new-compose-file&quot;&gt;New Compose file&lt;/h2&gt;

&lt;p&gt;Create the file &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; in the folder containing Dockerfile. We can now add this service to this file. So, the new compose file will look like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-conf&quot; data-lang=&quot;conf&quot;&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&#39;2&#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;:
  &lt;span class=&quot;n&quot;&gt;lb&lt;/span&gt;:
    &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;: .
    &lt;span class=&quot;n&quot;&gt;container_name&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;lb&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ports&lt;/span&gt;:
      - &lt;span class=&quot;s2&quot;&gt;&quot;80:80&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;:
      - &lt;span class=&quot;n&quot;&gt;constraint&lt;/span&gt;:&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;==&lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;
      - &lt;span class=&quot;n&quot;&gt;APP_NAME&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;tutum&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;nodejs&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;
      - &lt;span class=&quot;n&quot;&gt;CONSUL_URL&lt;/span&gt;=${&lt;span class=&quot;n&quot;&gt;KV_IP&lt;/span&gt;}:&lt;span class=&quot;m&quot;&gt;8500&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;depends_on&lt;/span&gt;:
      - &lt;span class=&quot;n&quot;&gt;web&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;networks&lt;/span&gt;:
      - &lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;tier&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;web&lt;/span&gt;:
    &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;hanzel&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;tutum&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;nodejs&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ports&lt;/span&gt;:
      - &lt;span class=&quot;s2&quot;&gt;&quot;4000&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;:
      - &lt;span class=&quot;n&quot;&gt;APP_PORT&lt;/span&gt;=&lt;span class=&quot;m&quot;&gt;4000&lt;/span&gt;
      - &lt;span class=&quot;n&quot;&gt;REDIS_IP&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;
      - &lt;span class=&quot;n&quot;&gt;REDIS_PORT&lt;/span&gt;=&lt;span class=&quot;m&quot;&gt;6379&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;depends_on&lt;/span&gt;:
      - &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;networks&lt;/span&gt;:
      - &lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;tier&lt;/span&gt;
      - &lt;span class=&quot;n&quot;&gt;back&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;tier&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;:
    &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;container_name&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; --&lt;span class=&quot;n&quot;&gt;appendonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yes&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;volumes&lt;/span&gt;:
      - &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;:/&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;networks&lt;/span&gt;:
      - &lt;span class=&quot;n&quot;&gt;back&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;tier&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;volumes&lt;/span&gt;:
  &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;:
    &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;networks&lt;/span&gt;:
  &lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;tier&lt;/span&gt;:
    &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;overlay&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;back&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;tier&lt;/span&gt;:
    &lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;overlay&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We have new service name &lt;code class=&quot;highlighter-rouge&quot;&gt;lb&lt;/code&gt;. It is build using Dockerfile in the current directory. The port 80 of the container is mapped to port 80 of the host. We need to set up three environment variables:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;constraint:node&lt;/code&gt;: The name of the node where this service should run. We want the load balancing to always run on the &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; node.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;APP_NAME&lt;/code&gt;: The image name of the service you need to load balance. Here, it is &lt;code class=&quot;highlighter-rouge&quot;&gt;tutum-nodejs-redis&lt;/code&gt;. You can load balance any service by providing its name here.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CONSUL_URL&lt;/code&gt;: The url of consul. We are using the &lt;code class=&quot;highlighter-rouge&quot;&gt;KV_IP&lt;/code&gt; environment variable for this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have a new overlay network named &lt;code class=&quot;highlighter-rouge&quot;&gt;front-tier&lt;/code&gt;. This connects &lt;code class=&quot;highlighter-rouge&quot;&gt;lb&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;web&lt;/code&gt; services. Note that, the load balancer doesn’t need to connect to redis, so these are put in two different networks. The &lt;code class=&quot;highlighter-rouge&quot;&gt;web&lt;/code&gt; services is connected to both these networks.&lt;/p&gt;

&lt;p&gt;Instead of building a new image, you may use the image &lt;a href=&quot;https://hub.docker.com/r/hanzel/load-balancing-swarm/&quot;&gt;hanzel/load-balancing-swarm&lt;/a&gt;. Just replace the line &lt;code class=&quot;highlighter-rouge&quot;&gt;build: .&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;image: hanzel/load-balancing-swarm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we need to stop and remove the running services and start the new services.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker-compose stop; docker-compose rm -f
docker-compose up -d&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We have only one instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;web&lt;/code&gt; running now. We will scale this to three with the following command.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker-compose scale &lt;span class=&quot;nv&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can see that three instances of the &lt;code class=&quot;highlighter-rouge&quot;&gt;web&lt;/code&gt; service is running when we do &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose ps&lt;/code&gt;. The output will look like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Name                       Command                          State   Ports               
------------------------------------------------------------------------------------------------------
lb                         /bin/start.sh                    Up      443/tcp, 104.131.177.65:80-&amp;gt;80/tcp
loadbalancingswarm_web_1   npm start                        Up      45.55.48.84:32777-&amp;gt;4000/tcp
loadbalancingswarm_web_2   npm start                        Up      104.131.177.65:32772-&amp;gt;4000/tcp
loadbalancingswarm_web_3   npm start                        Up      45.55.48.84:32778-&amp;gt;4000/tcp
redis                      /entrypoint.sh redis-serve ...   Up      6379/tcp&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this case, you can go to &lt;code class=&quot;highlighter-rouge&quot;&gt;104.131.177.65&lt;/code&gt;, the IP of your master node to see the application running. Refresh the page and see the &lt;code class=&quot;highlighter-rouge&quot;&gt;host&lt;/code&gt; value changing. This shows that the load balancer is working.&lt;/p&gt;

&lt;p&gt;You can see the nginx configuration generated by consul-template by using the command &lt;code class=&quot;highlighter-rouge&quot;&gt;docker exec -t lb cat /etc/nginx/conf.d/default.conf&lt;/code&gt;. This should produce an output that looks like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nginx&quot; data-lang=&quot;nginx&quot;&gt;&lt;span class=&quot;k&quot;&gt;upstream&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tutum-nodejs-redis&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;least_conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;10.132.1.191&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32777&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;max_fails=3&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fail_timeout=60&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;weight=1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;10.132.1.191&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32778&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;max_fails=3&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fail_timeout=60&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;weight=1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;10.132.14.17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32772&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;max_fails=3&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fail_timeout=60&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;weight=1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;proxy_pass&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://tutum-nodejs-redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Docker Swarm allows us to seamlessly scale and distribute docker work load to a cluster of hosts. We have now implemented load balancing of docker images using Docker Swarm. This is just a basic application of docker swarm. You can create more sophisticated setups with docker swarm like auto-scaling, database cluster, etc. I will try talking more about that in the coming articles.&lt;/p&gt;

&lt;p&gt;You can stop the services and remove the hosts using the following commands.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker-compose down
docker-machine stop consul master slave
docker-machine rm consul master slave&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Tue, 08 Mar 2016 07:30:00 +0530</pubDate>
        <link>https://botleg.com/stories/load-balancing-with-docker-swarm/</link>
        <guid isPermaLink="true">https://botleg.com/stories/load-balancing-with-docker-swarm/</guid>
        
        <category>docker</category>
        
        <category>swarm</category>
        
        <category>cluster</category>
        
        <category>nodejs</category>
        
        <category>redis</category>
        
        <category>nginx</category>
        
        <category>consul</category>
        
        <category>consul-template</category>
        
        <category>multi-host</category>
        
        <category>networking</category>
        
        <category>overlay</category>
        
        <category>digitalocean</category>
        
        <category>compose</category>
        
        <category>machine</category>
        
        
        <category>devops</category>
        
      </item>
    
      <item>
        <title>Orchestrate Docker containers with Tutum</title>
        <author><name>Hanzel Jesheen</name></author>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.tutum.co/&quot;&gt;Tutum&lt;/a&gt; simplifies the process of hosting Docker containers. We can connect Tutum to our cloud provider and create node clusters. We can then deploy, scale and link Docker containers from the Tutum interface. In this article, we will see how to deploy a Node.js application with Redis as the data store. We will also scale this application and use load balacing. The entire code for this application can be found &lt;a href=&quot;https://github.com/botleg/tutum-nodejs-redis&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-containers&quot;&gt;The Containers&lt;/h2&gt;

&lt;p&gt;I have made a simple Node.js application that connects to Redis database and lets you to set and see the value of a key. We use the &lt;a href=&quot;https://hub.docker.com/_/redis/&quot;&gt;official image&lt;/a&gt; for Redis. The app has three endpoints:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/key&lt;/code&gt;: Returns the value of the &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/key/value&lt;/code&gt;: Sets the value of the &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;: Return the host name.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, if your site is hosted at &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:8000&lt;/code&gt;, you can go to &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:8000/foo/bar&lt;/code&gt; to set the value of the key &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt; and then you can go to &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:8000/foo&lt;/code&gt; to get the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt;(in this case, &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt;). To check load balacing, all the endpoints returns the current host name.&lt;/p&gt;

&lt;p&gt;You can check out the code for this in the GitHub &lt;a href=&quot;https://github.com/botleg/tutum-nodejs-redis&quot;&gt;repo&lt;/a&gt;. It is also built into a Docker image under &lt;a href=&quot;https://hub.docker.com/r/hanzel/tutum-nodejs-redis/&quot;&gt;hanzel/tutum-nodejs-redis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To run this application, you need to set the following environment variables:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;APP_PORT&lt;/code&gt;: Port to run the Node.js application.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;REDIS_IP&lt;/code&gt;: The IP of the redis instance.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;REDIS_PORT&lt;/code&gt;: The PORT of the redis instance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are going to use HAProxy to do the load balancing. Tutum provides it’s own docker &lt;a href=&quot;https://github.com/tutumcloud/haproxy&quot;&gt;image&lt;/a&gt; for HAProxy. If we deploy this image in Tutum and the link a service, it will configure itself based on the target number of containers of that linked service.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-node-clusters&quot;&gt;Creating a Node clusters&lt;/h2&gt;

&lt;p&gt;Create an account with &lt;a href=&quot;https://www.tutum.co/&quot;&gt;Tutum&lt;/a&gt;. Then connect it to your favourite cloud provider. Nodes are server instances or hosts, where we will be hosting the containers.&lt;/p&gt;

&lt;p&gt;Goto Nodes tab and click on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Launch your first node&lt;/code&gt; button. Give a name for the cluster. You can use &lt;code class=&quot;highlighter-rouge&quot;&gt;Deploy tags&lt;/code&gt; to specify where you want the services to be hosted. For this article, it’s not needed. Now select your provider, region and instance type, as needed. I am selecting 1GB instance from Digital Ocean.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tutum-nodes@2x.jpg&quot; srcset=&quot;/assets/images/tutum-nodes@1x.jpg 300w, /assets/images/tutum-nodes@2x.jpg 600w, /assets/images/tutum-nodes@3x.jpg 900w&quot; sizes=&quot;(min-width: 960px) 900px, 100vw&quot; alt=&quot;New node cluster settings&quot; class=&quot;center-image&quot; /&gt;
&lt;em class=&quot;image-caption&quot;&gt;New node cluster settings&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now select the number of nodes you want in your cluster. I want two nodes in the cluster. You can change any time as needed. Now click the button &lt;code class=&quot;highlighter-rouge&quot;&gt;Launch node cluster&lt;/code&gt; button to deploy the cluster. This could take a few minutes. Once it’s ready, we can see the status &lt;code class=&quot;highlighter-rouge&quot;&gt;Deployed&lt;/code&gt; for each node.&lt;/p&gt;

&lt;h2 id=&quot;stackfiles&quot;&gt;Stackfiles&lt;/h2&gt;

&lt;p&gt;Each docker image running are called services here. We can add each services and configure it from the Tutum web UI with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Services&lt;/code&gt; tab. However, this is not the best way to do this.&lt;/p&gt;

&lt;p&gt;Tutum supports configuration files called &lt;code class=&quot;highlighter-rouge&quot;&gt;Stackfiles&lt;/code&gt; and those files are named &lt;code class=&quot;highlighter-rouge&quot;&gt;tutum.yml&lt;/code&gt;. This is very similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; with additional parameters for the deployment configuration. We can specify, configure and link services with this file.&lt;/p&gt;

&lt;p&gt;We will start with the redis service. The configuration required for this is given below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-conf&quot; data-lang=&quot;conf&quot;&gt;&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;:
  &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&#39;redis&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;target_num_containers&lt;/span&gt;: &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;deployment_strategy&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;high_availability&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; --&lt;span class=&quot;n&quot;&gt;appendonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yes&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expose&lt;/span&gt;:
    - &lt;span class=&quot;s1&quot;&gt;&#39;6379&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;volumes&lt;/span&gt;:
    - /&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The image used in &lt;code class=&quot;highlighter-rouge&quot;&gt;redis&lt;/code&gt;. The next two parameters are for deployment purpose. The &lt;code class=&quot;highlighter-rouge&quot;&gt;target_num_containers&lt;/code&gt; parameters is for scaling and it show how many instance of this containers that we need. We need only one instance of Redis. There are many deployment strategies available. The &lt;code class=&quot;highlighter-rouge&quot;&gt;high_availability&lt;/code&gt; value ensures that the containers are deployment in such a way that it’s is always available. You can read more about these parameters in &lt;a href=&quot;https://support.tutum.co/support/solutions/articles/5000583471-stack-yaml-reference&quot;&gt;Stackfile docs&lt;/a&gt;. We use the command &lt;code class=&quot;highlighter-rouge&quot;&gt;redis-server --appendonly yes&lt;/code&gt; for persistance with Redis. We need to expose the port 6379 of Redis container to link it to other services. The final parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;volumes&lt;/code&gt;, save the data in &lt;code class=&quot;highlighter-rouge&quot;&gt;/data&lt;/code&gt; folder for persistance.&lt;/p&gt;

&lt;p&gt;The configuration for Node.js application is given below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-conf&quot; data-lang=&quot;conf&quot;&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;:
  &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&#39;hanzel/tutum-nodejs-redis&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;target_num_containers&lt;/span&gt;: &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;deployment_strategy&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;high_availability&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt;:
    - &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;:
    &lt;span class=&quot;n&quot;&gt;APP_PORT&lt;/span&gt;: &lt;span class=&quot;m&quot;&gt;4000&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;REDIS_IP&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;REDIS_PORT&lt;/span&gt;: &lt;span class=&quot;m&quot;&gt;6379&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expose&lt;/span&gt;:
    - &lt;span class=&quot;s1&quot;&gt;&#39;4000&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The images used here is &lt;code class=&quot;highlighter-rouge&quot;&gt;hanzel/tutum-nodejs-redis&lt;/code&gt;. We are using the load balancing of this service. So we will have four instances of this container. Since we have used the &lt;code class=&quot;highlighter-rouge&quot;&gt;high_availability&lt;/code&gt; deployment strategy, each of our two nodes will have two containers of this image each.&lt;/p&gt;

&lt;p&gt;We are linking the redis service to this service with the &lt;code class=&quot;highlighter-rouge&quot;&gt;links&lt;/code&gt; paramter. This allows us to access the port 6379 of redis, which is the exposed port of redis service. We can also access the IP of redis service with &lt;code class=&quot;highlighter-rouge&quot;&gt;redis&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;Now, we need to set the environment variables. This application will run on the port defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;APP_PORT&lt;/code&gt; variable, 4000 in this case. The IP for redis instance is &lt;code class=&quot;highlighter-rouge&quot;&gt;redis&lt;/code&gt; and the port is 6379. We now expose the port 4000 of this application.&lt;/p&gt;

&lt;p&gt;The final service that we use is for load balancing and the configuration for this is given below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-conf&quot; data-lang=&quot;conf&quot;&gt;&lt;span class=&quot;n&quot;&gt;lb&lt;/span&gt;:
  &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&#39;tutum/haproxy:latest&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt;:
    - &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ports&lt;/span&gt;:
    - &lt;span class=&quot;s1&quot;&gt;&#39;80:80&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;restart&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;always&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;roles&lt;/span&gt;:
    - &lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The image used here is &lt;code class=&quot;highlighter-rouge&quot;&gt;tutum/haproxy:latest&lt;/code&gt; and we are linking the &lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt; service. With the &lt;code class=&quot;highlighter-rouge&quot;&gt;ports&lt;/code&gt; parameter, we can set the ports that are publicly accessible. We are mapping the port &lt;code class=&quot;highlighter-rouge&quot;&gt;80&lt;/code&gt; of the host device with port &lt;code class=&quot;highlighter-rouge&quot;&gt;80&lt;/code&gt; of this container. We set the &lt;code class=&quot;highlighter-rouge&quot;&gt;restart&lt;/code&gt; parameter to &lt;code class=&quot;highlighter-rouge&quot;&gt;always&lt;/code&gt; so that this service will restarted everytime it stops. We also need to set the &lt;code class=&quot;highlighter-rouge&quot;&gt;roles&lt;/code&gt; parameter to &lt;code class=&quot;highlighter-rouge&quot;&gt;global&lt;/code&gt;. This allow this service to communicate with Tutum APIs and reconfigure based on your cluster.&lt;/p&gt;

&lt;p&gt;So the entire Stackfile will be this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-conf&quot; data-lang=&quot;conf&quot;&gt;&lt;span class=&quot;n&quot;&gt;lb&lt;/span&gt;:
  &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&#39;tutum/haproxy:latest&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt;:
    - &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ports&lt;/span&gt;:
    - &lt;span class=&quot;s1&quot;&gt;&#39;80:80&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;restart&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;always&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;roles&lt;/span&gt;:
    - &lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;:
  &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&#39;hanzel/tutum-nodejs-redis&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;target_num_containers&lt;/span&gt;: &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;deployment_strategy&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;high_availability&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt;:
    - &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;:
    &lt;span class=&quot;n&quot;&gt;APP_PORT&lt;/span&gt;: &lt;span class=&quot;m&quot;&gt;4000&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;REDIS_IP&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;REDIS_PORT&lt;/span&gt;: &lt;span class=&quot;m&quot;&gt;6379&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expose&lt;/span&gt;:
    - &lt;span class=&quot;s1&quot;&gt;&#39;4000&#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;:
  &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&#39;redis&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;target_num_containers&lt;/span&gt;: &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;deployment_strategy&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;high_availability&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; --&lt;span class=&quot;n&quot;&gt;appendonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yes&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expose&lt;/span&gt;:
    - &lt;span class=&quot;s1&quot;&gt;&#39;6379&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;volumes&lt;/span&gt;:
    - /&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;deploying-the-stack&quot;&gt;Deploying the Stack&lt;/h2&gt;

&lt;p&gt;To deploy this stack, goto the &lt;code class=&quot;highlighter-rouge&quot;&gt;Stacks&lt;/code&gt; tab in Tutum and click the &lt;code class=&quot;highlighter-rouge&quot;&gt;Create stack&lt;/code&gt; button. Now give a name for this stack and paste &lt;a href=&quot;https://stackfiles.io/registry/56a37bc035a28a01009e57ed&quot;&gt;the Stackfile&lt;/a&gt;. Now, click &lt;code class=&quot;highlighter-rouge&quot;&gt;Create and deploy&lt;/code&gt;. This will deploy all the services. This can also take a few minutes.&lt;/p&gt;

&lt;p&gt;Once the stack is running, goto &lt;code class=&quot;highlighter-rouge&quot;&gt;Endpoints&lt;/code&gt; tab in the stack. This will have all publicly accessible ports of any service. We have only one, the port 80 in load balancer service. A &lt;code class=&quot;highlighter-rouge&quot;&gt;tutum.io&lt;/code&gt; subdomain will be created for this. Open this link to access your stack.&lt;/p&gt;

&lt;p&gt;You can see the hostname in the page. Try reloading this page and we can see that the hostname is changing. This shows that out load balancing is working.&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;In this article, we deployed a load balanced Node.js application and Redis database with Docker containers with &lt;a href=&quot;https://www.tutum.co/&quot;&gt;Tutum&lt;/a&gt;. We have seen that, Tutum provides us with easy access to powerful features like load balancing and scaling when using Docker hosting.&lt;/p&gt;
</description>
        <pubDate>Wed, 03 Feb 2016 06:30:00 +0530</pubDate>
        <link>https://botleg.com/stories/orchestrate-docker-containers-with-tutum/</link>
        <guid isPermaLink="true">https://botleg.com/stories/orchestrate-docker-containers-with-tutum/</guid>
        
        <category>tutum</category>
        
        <category>docker</category>
        
        <category>container</category>
        
        <category>haproxy</category>
        
        <category>node.js</category>
        
        <category>redis</category>
        
        <category>scale</category>
        
        <category>load</category>
        
        <category>balance</category>
        
        <category>deploy</category>
        
        
        <category>devops</category>
        
      </item>
    
      <item>
        <title>HTTPS with Let&#39;s Encrypt and nginx</title>
        <author><name>Hanzel Jesheen</name></author>
        <description>&lt;p&gt;HTTPS is a secure protocol for the internet. Unlike the communication in HTTP, which happens in plain-text, the data transferred between the server and the client with HTTPS is encrypted. HTTPS also verifies the identity of the website we are accessing with a &lt;code class=&quot;highlighter-rouge&quot;&gt;SSL/TLS&lt;/code&gt; certificate. It was initially used in online payment website, but in the recent age of privacy, it is deemed mandatory. That’s where &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let’s Encrypt&lt;/a&gt; comes in.&lt;/p&gt;

&lt;p&gt;Let’s Encrypt is a &lt;code class=&quot;highlighter-rouge&quot;&gt;Certificate Authority&lt;/code&gt;, they verify a website and issues certificates. The browsers have a list of trusted Certificate Authorities whose certificates it will accept. There are a lot of Certificate Authorities, so what make Let’s Encrypt different?&lt;/p&gt;

&lt;p&gt;Two main issues with SSL certificates was that, it was paid and the process is not generally automated. Let’s Encrypt solves both these issues. Let’s Encrypt issues certificates &lt;code class=&quot;highlighter-rouge&quot;&gt;free of cost&lt;/code&gt; and it can be automated. You just need root terminal access to the server. It is currently in public beta and is backed by major players like Mozilla, Facebook, Google, etc.&lt;/p&gt;

&lt;p&gt;In this article, we will see how to create a certificate with Let’s Encrypt and use it to host our server via HTTPS. We will be using an &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt; server here but the process is similar to all servers.&lt;/p&gt;

&lt;h2 id=&quot;installing-lets-encrypt&quot;&gt;Installing Let’s Encrypt&lt;/h2&gt;
&lt;p&gt;Use SSH to log into your server as &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; user. If you have &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt; installed in the server, you can clone the Let’s Encrypt repo in &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt&lt;/code&gt; folder.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /opt
git clone https://github.com/letsencrypt/letsencrypt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Otherwise, download the latest &lt;code class=&quot;highlighter-rouge&quot;&gt;tar.gz&lt;/code&gt; package from &lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/letsencrypt/letsencrypt/releases&lt;/code&gt; with wget. Extract this to &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/&lt;/code&gt; and rename the folder to &lt;code class=&quot;highlighter-rouge&quot;&gt;letsencrypt&lt;/code&gt;. Latest version at the time of writing was &lt;code class=&quot;highlighter-rouge&quot;&gt;v0.2.0&lt;/code&gt;, so the commands for this are.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;wget https://github.com/letsencrypt/letsencrypt/archive/v0.2.0.tar.gz
tar xf v0.2.0.tar.gz -C /opt/
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /opt
mv letsencrypt-0.2.0 letsencrypt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we have letsencrypt installed at &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/letsencrypt&lt;/code&gt;. You can add this to &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;lets-encrypt-configuration&quot;&gt;Let’s Encrypt Configuration&lt;/h2&gt;
&lt;p&gt;Before you add SSL certificates, you need to register a domain and the domain must point to the server’s public address. For this, you need to a set up a &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; record with your DNS. You can check with your domain registar or custom DNS service to do this. If you have a HTTP site running in the server, you would have already done this.&lt;/p&gt;

&lt;p&gt;Let’s Encrypt need to verify that you own the domain before they provide you with the certificates. This can be done in various ways. If you are running &lt;code class=&quot;highlighter-rouge&quot;&gt;Apache&lt;/code&gt; server, Let’s Encrypt can use it to verify your ownership and even install the certificates in the server for you. There is also something similar for &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt;, but it’s still experimental and not production-ready.&lt;/p&gt;

&lt;p&gt;Another method is &lt;code class=&quot;highlighter-rouge&quot;&gt;standalone&lt;/code&gt;, where the Let’s Encrypt client will create a temporary webserver for verification. However, this need our &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt; server to be shutdown while creating and renewing our certificates. That’s just not viable.&lt;/p&gt;

&lt;p&gt;So we will go with the &lt;code class=&quot;highlighter-rouge&quot;&gt;webroot&lt;/code&gt; method. In this method, we provide a folder path as &lt;code class=&quot;highlighter-rouge&quot;&gt;webroot-path&lt;/code&gt;. This folder must be served by our server. A temporary file will be made inside &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;webroot-path&amp;gt;/.well-known/acme-challenge/&lt;/code&gt; by the client. Let’s Encrypt will access it from the domain to verify the ownership.&lt;/p&gt;

&lt;p&gt;For example, if the domain in &lt;code class=&quot;highlighter-rouge&quot;&gt;www.example.com&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;webroot-path&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/nginx/html&lt;/code&gt;. The client will create a temporary file named something like &lt;code class=&quot;highlighter-rouge&quot;&gt;1PnCIkY&lt;/code&gt; inside &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/nginx/html/.well-known/acme-challenge/&lt;/code&gt; and it will accessed from &lt;code class=&quot;highlighter-rouge&quot;&gt;www.example.com/.well-known/acme-challenge/1PnCIkY&lt;/code&gt; for verification of the domain ownership.&lt;/p&gt;

&lt;p&gt;The configuration needed to create the certificates are put in a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;cli.ini&lt;/code&gt; inside &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/letsencrypt&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-conf&quot; data-lang=&quot;conf&quot;&gt;&lt;span class=&quot;n&quot;&gt;rsa&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; = &lt;span class=&quot;m&quot;&gt;4096&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; = &amp;lt;&lt;span class=&quot;n&quot;&gt;your&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&amp;gt;
&lt;span class=&quot;n&quot;&gt;domains&lt;/span&gt; = &amp;lt;&lt;span class=&quot;n&quot;&gt;domains&lt;/span&gt;&amp;gt;
&lt;span class=&quot;n&quot;&gt;authenticator&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;webroot&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;webroot&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; = /&lt;span class=&quot;n&quot;&gt;usr&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;share&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;nginx&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You need to provide your email address for recovering the certificate credentials. Also add the domains for which you want the certificates for seperated by commas like, &lt;code class=&quot;highlighter-rouge&quot;&gt;example.com, www.example.com&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;nginx&quot;&gt;Nginx&lt;/h2&gt;
&lt;p&gt;We need to set up nginx to serve the &lt;code class=&quot;highlighter-rouge&quot;&gt;webroot-path&lt;/code&gt; folder with nginx. If you have not installed &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt; yet, install it with,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;apt-get install nginx&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, open the nginx configuration at &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx/sites-available/default&lt;/code&gt; and change it as following to serve &lt;code class=&quot;highlighter-rouge&quot;&gt;.well-known&lt;/code&gt; folder.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nginx&quot; data-lang=&quot;nginx&quot;&gt;&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;server_name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;domain-name&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;kn&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/usr/share/nginx/html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.html&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.htm&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.nginx-debian.html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;^~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/.well-known/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;create-certificate&quot;&gt;Create Certificate&lt;/h2&gt;
&lt;p&gt;Finally, we are ready to create our first certificate. Execute the following commands.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /opt/letsencrypt
./letsencrypt-auto certonly --agree-tos --config cli.ini&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;certonly&lt;/code&gt; parameter creates the certificate. &lt;code class=&quot;highlighter-rouge&quot;&gt;--agree-tos&lt;/code&gt; flag is used say that we are accepting the terms. &lt;code class=&quot;highlighter-rouge&quot;&gt;--config&lt;/code&gt; flag is used to point to the configuration file, which is found in &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/letsencrypt/cli.ini&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This creates the SSL certificates in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/letsencrypt/live/&amp;lt;domain-name&amp;gt;/&lt;/code&gt; folder. Whenever we renew the certificates, the latest will be found in this folder.&lt;/p&gt;

&lt;h2 id=&quot;nginx-https-configuration&quot;&gt;Nginx HTTPS configuration&lt;/h2&gt;
&lt;p&gt;Now that we have the certificates, we can change the configuration in nginx to serve via HTTPS. The HTTPS connection is done via the port &lt;code class=&quot;highlighter-rouge&quot;&gt;443&lt;/code&gt;. The first server block in nginx configuration at &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx/sites-available/default&lt;/code&gt; is to redirect the HTTP traffic to HTTPS. We are also returning a &lt;code class=&quot;highlighter-rouge&quot;&gt;301 Moved Permanently&lt;/code&gt; header back. Replace the &lt;code class=&quot;highlighter-rouge&quot;&gt;domain-name&lt;/code&gt; here to your domain.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nginx&quot; data-lang=&quot;nginx&quot;&gt;&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;server_name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;domain-name&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;301&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$host$request_uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The second server block is for HTTPS running at port 443. It uses the certificates found at &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/letsencrypt/live/&amp;lt;domain-name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nginx&quot; data-lang=&quot;nginx&quot;&gt;&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;443&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;server_name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;domain-name&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;ssl_certificate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/etc/letsencrypt/live/&amp;lt;domain-name&amp;gt;/fullchain.pem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;ssl_certificate_key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/etc/letsencrypt/live/&amp;lt;domain-name&amp;gt;/privkey.pem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/usr/share/nginx/html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.html&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.htm&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.nginx-debian.html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;try_files&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;^~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/.well-known/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can reload the nginx with,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;service nginx reload&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If your are using reverse-proxy to host in some other port, the configuration will look like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nginx&quot; data-lang=&quot;nginx&quot;&gt;&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4125&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;server_name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;domain-name&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;error_page&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;497&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4125&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$request_uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;ssl&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;ssl_certificate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/etc/letsencrypt/live/&amp;lt;domain-name&amp;gt;/fullchain.pem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;ssl_certificate_key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/etc/letsencrypt/live/&amp;lt;domain-name&amp;gt;/privkey.pem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;proxy_pass&lt;/span&gt;          &lt;span class=&quot;s&quot;&gt;http://127.0.0.1:4125/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;proxy_set_header&lt;/span&gt;    &lt;span class=&quot;s&quot;&gt;X-Real-IP&lt;/span&gt;         &lt;span class=&quot;nv&quot;&gt;$remote_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;proxy_set_header&lt;/span&gt;    &lt;span class=&quot;s&quot;&gt;X-Forwarded-For&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;proxy_set_header&lt;/span&gt;    &lt;span class=&quot;s&quot;&gt;X_FORWARDED_PROTO&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;proxy_set_header&lt;/span&gt;    &lt;span class=&quot;s&quot;&gt;Host&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;$http_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;proxy_buffering&lt;/span&gt;     &lt;span class=&quot;no&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;proxy_redirect&lt;/span&gt;      &lt;span class=&quot;no&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, the &lt;code class=&quot;highlighter-rouge&quot;&gt;error_page 497&lt;/code&gt; is used to redirect the HTTP traffic to port &lt;code class=&quot;highlighter-rouge&quot;&gt;4125&lt;/code&gt; to HTTPS.&lt;/p&gt;

&lt;h2 id=&quot;automated-renewal&quot;&gt;Automated Renewal&lt;/h2&gt;
&lt;p&gt;Let’s Encrypt certificates are only valid for 90 days, so you would have to renew them. To renew, you just have to run the client with &lt;code class=&quot;highlighter-rouge&quot;&gt;--renew-by-default&lt;/code&gt; flag also. The command would look like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/opt/letsencrypt/letsencrypt-auto certonly --renew-by-default --agree-tos --config /opt/letsencrypt/cli.ini&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This command will renew the certificate. We can automate renewal by running this command as a &lt;code class=&quot;highlighter-rouge&quot;&gt;cron&lt;/code&gt; job. Cron is a time-based job scheduler. We can make this command run once a month to renew certificates at a monthly basis to prevent it from being expired. We also need to reload the nginx configurations.&lt;/p&gt;

&lt;p&gt;To add a new cron job, type the following command.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo crontab -e&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Add the following lines to the end of the cron file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;SHELL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/bin/bash
&lt;span class=&quot;nv&quot;&gt;HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/
&lt;span class=&quot;nv&quot;&gt;MAILTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;”example@mail.com”
30 4 1 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/opt/letsencrypt/letsencrypt-auto certonly --renew-by-default --agree-tos --config /opt/letsencrypt/cli.ini &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; service nginx reload&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &amp;gt;&amp;gt; /var/log/letsencrypt.log&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This causes the command to run every month on the 1st at 4:30AM. The output of this command is stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/log/letsencrypt.log&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As a side note, there are some limits on the number of certificates we can make a week for a single domain. So to try these command with no limits, you can add the flag &lt;code class=&quot;highlighter-rouge&quot;&gt;--server https://acme-staging.api.letsencrypt.org/directory&lt;/code&gt; to Let’s Encrypt commands. This creates dummy certificates, which are NOT valid but you can use it to test the working of the cron job.&lt;/p&gt;
</description>
        <pubDate>Sun, 17 Jan 2016 22:30:00 +0530</pubDate>
        <link>https://botleg.com/stories/https-with-lets-encrypt-and-nginx/</link>
        <guid isPermaLink="true">https://botleg.com/stories/https-with-lets-encrypt-and-nginx/</guid>
        
        <category>https</category>
        
        <category>letsencrypt</category>
        
        <category>ssl</category>
        
        <category>tls</category>
        
        <category>certificate</category>
        
        <category>authority</category>
        
        <category>nginx</category>
        
        <category>git</category>
        
        
        <category>devops</category>
        
      </item>
    
      <item>
        <title>Docker Hosting with sloppy.io</title>
        <author><name>Hanzel Jesheen</name></author>
        <description>&lt;p&gt;&lt;a href=&quot;http://sloppy.io/&quot;&gt;Sloppy.io&lt;/a&gt; is a new Container as a Service (CaaS) platform that you can use to host Docker images. It is currently in a generous private beta, which provides you with 4GB RAM, 10 containers and 10GB storage for free. You can sign up for this &lt;a href=&quot;http://sloppy.io/#signup&quot;&gt;here&lt;/a&gt;. I received the reply from them within the hour. sloppy.io makes it really easy to host and especially scale docker images.&lt;/p&gt;

&lt;p&gt;In this article, we are going to host a Docker project in sloppy.io which has a Node.js server and Redis database. The code for this project can be found &lt;a href=&quot;https://github.com/botleg/docker-sloppy&quot;&gt;here&lt;/a&gt; and the demo of the site can be found &lt;a href=&quot;http://botleg.sloppy.zone&quot;&gt;here&lt;/a&gt;. Also, the docker image we have created with Node.js server is hosted in &lt;a href=&quot;https://hub.docker.com/r/hanzel/docker-sloppy&quot;&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-app&quot;&gt;The App&lt;/h2&gt;
&lt;p&gt;The app has a &lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt; database and we have used the &lt;a href=&quot;https://hub.docker.com/_/redis/&quot;&gt;official redis image&lt;/a&gt; for it. The Node.js application is also really basic. It connects to this redis database and lets you to set and see the value of a key. It has two routes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/key&lt;/code&gt;: Returns the value of the &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/key/value&lt;/code&gt;: Sets the value of the &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, if your site is hosted at &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:8000&lt;/code&gt;, you can go to &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:8000/foo/bar&lt;/code&gt; to set the value of the key &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt; and then you can go to &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:8000/foo&lt;/code&gt; to get the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt;(in this case, &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt;). You can check out the code for this in the GitHub &lt;a href=&quot;https://github.com/botleg/docker-sloppy&quot;&gt;repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The only thing that change for Docker is that, you need to get the &lt;code class=&quot;highlighter-rouge&quot;&gt;host&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;port&lt;/code&gt; for redis connect from environment variables. So the code to connect to the redis instance becomes,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;REDIS_PORT_6379_TCP_PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;REDIS_PORT_6379_TCP_ADDR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The port exists in &lt;code class=&quot;highlighter-rouge&quot;&gt;REDIS_PORT_6379_TCP_PORT&lt;/code&gt; and the host IP is in &lt;code class=&quot;highlighter-rouge&quot;&gt;REDIS_PORT_6379_TCP_ADDR&lt;/code&gt;. We will talk about setting these environment varibles later.&lt;/p&gt;

&lt;h2 id=&quot;dockerfile&quot;&gt;Dockerfile&lt;/h2&gt;
&lt;p&gt;To make this project a Docker image, we need a &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; for the instructions. The Dockerfile for this project looks like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:argon&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/app
WORKDIR /&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;COPY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/app/&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;COPY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EXPOSE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;CMD&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;npm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is pretty basic stuff. We use the &lt;code class=&quot;highlighter-rouge&quot;&gt;node:argon&lt;/code&gt; as the base image, which has version 4 of Node.js. Then we set &lt;code class=&quot;highlighter-rouge&quot;&gt;/app&lt;/code&gt; as the working directory in the image and we copy the &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file there. We run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt; to install all the dependencies and then copy the rest of the repo to &lt;code class=&quot;highlighter-rouge&quot;&gt;/app&lt;/code&gt; folder. Next, we start the application with &lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt; command. This Docker image in hosted in Docker Hub named &lt;a href=&quot;https://hub.docker.com/r/hanzel/docker-sloppy/&quot;&gt;hanzel/docker-sloppy&lt;/a&gt;. You can read more about writing Dockerfile &lt;a href=&quot;https://docs.docker.com/engine/reference/builder/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;docker-compose&quot;&gt;Docker Compose&lt;/h2&gt;
&lt;p&gt;Before we actually do the hosting in sloppy.io, let’s see how to do it in a PaaS tool like &lt;a href=&quot;https://www.digitalocean.com/&quot;&gt;Digital Ocean&lt;/a&gt; or &lt;a href=&quot;https://aws.amazon.com/ec2/&quot;&gt;AWS EC2&lt;/a&gt; using the &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Compose&lt;/code&gt;. It is used to run multi-container applications and the configurations for this are given in the file &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;. You can read more about it &lt;a href=&quot;https://docs.docker.com/compose/compose-file/&quot;&gt;here&lt;/a&gt;. We have two servies, one for Node.js server and one for Redis database.&lt;/p&gt;

&lt;p&gt;We will start with the &lt;code class=&quot;highlighter-rouge&quot;&gt;redis&lt;/code&gt; service.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;s&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis-server --appendonly yes&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;expose&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;6379&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.:/data&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The image for this is the official &lt;code class=&quot;highlighter-rouge&quot;&gt;redis&lt;/code&gt; image. We need to expose the port &lt;code class=&quot;highlighter-rouge&quot;&gt;6379&lt;/code&gt; for the server to connect to it. By exposing the port, only the other linked services can access it and it is not published to the host machine. So, we have prevented external access to this redis instance. Now, for persistance storage in redis, we need to use a docker volume and map the current folder in host machine to &lt;code class=&quot;highlighter-rouge&quot;&gt;/data&lt;/code&gt; in the docker image. We do this with the &lt;code class=&quot;highlighter-rouge&quot;&gt;volume&lt;/code&gt; configuration. We also need to start redis with &lt;code class=&quot;highlighter-rouge&quot;&gt;appendonly&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt; servie looks like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;s&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hanzel/docker-sloppy&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;8000:8000&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The image for this is the one we have made, &lt;code class=&quot;highlighter-rouge&quot;&gt;hanzel/docker-sloppy&lt;/code&gt;. The Node.js server is listening to port &lt;code class=&quot;highlighter-rouge&quot;&gt;8000&lt;/code&gt;. We then map the port &lt;code class=&quot;highlighter-rouge&quot;&gt;8000&lt;/code&gt; in the image to port &lt;code class=&quot;highlighter-rouge&quot;&gt;8000&lt;/code&gt; in the host machine. So the application can be accessed in &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:8000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We link this service to the &lt;code class=&quot;highlighter-rouge&quot;&gt;redis&lt;/code&gt; service that we had defined earlier. Because of this linking, we can access the redis instance from &lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt; service. This creates the environment variables &lt;code class=&quot;highlighter-rouge&quot;&gt;REDIS_PORT_6379_TCP_ADDR&lt;/code&gt; (for host address of redis instance) and &lt;code class=&quot;highlighter-rouge&quot;&gt;REDIS_PORT_6379_TCP_PORT&lt;/code&gt; (for port of the redis instance), which can be accessed from within the  Node.js application.&lt;/p&gt;

&lt;p&gt;The entire &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; looks like this,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span class=&quot;s&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hanzel/docker-sloppy&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;8000:8000&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis-server --appendonly yes&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;expose&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;6379&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.:/data&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, you can start this application with &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose up -d&lt;/code&gt; command.&lt;/p&gt;

&lt;h2 id=&quot;hosting-with-sloppyio&quot;&gt;Hosting with sloppy.io&lt;/h2&gt;
&lt;p&gt;Hosting in sloppy.io is similar to using &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Compose&lt;/code&gt;, but you need to write &lt;code class=&quot;highlighter-rouge&quot;&gt;sloppy.json&lt;/code&gt; for configurations here. Most of the parameters here are the same, but there are a few additional parameters here, which is for the hosting purpose. Documentation about &lt;code class=&quot;highlighter-rouge&quot;&gt;sloppy.json&lt;/code&gt; can be found &lt;a href=&quot;http://sloppy.io/home/documentation/reference/the-sloppy-json/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the json file, each project can have multiple services and each service can have multiple apps. That seems a bit overwhelming. In most cases, we would need only one application in each service. For this application, we have two services:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;frontend&lt;/code&gt;, containing the &lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt; application.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;backend&lt;/code&gt;, containing the &lt;code class=&quot;highlighter-rouge&quot;&gt;redis&lt;/code&gt; application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The json for &lt;code class=&quot;highlighter-rouge&quot;&gt;frontend&lt;/code&gt; service is given below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;apps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;domain&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;uri&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{subdomain-name}.sloppy.zone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HTTP&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;instances&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;mem&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hanzel/docker-sloppy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;port_mappings&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;container_port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;REDIS_PORT_6379_TCP_ADDR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;redis.backend.botleg.{user-name}&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;../../backend/redis&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, we have one app named &lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt;. The default url provied by sloppy.io is a &lt;code class=&quot;highlighter-rouge&quot;&gt;sloppy.zone&lt;/code&gt; subdomain. You can also use a custom domain with CNAME records. We use the domain property object to choose the service URL, change &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;subdomain-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; as you require. Next, we have asked sloppy to create 2 instances of this application, with each instance having 512MB RAM. Then we have the docker image name, which is &lt;code class=&quot;highlighter-rouge&quot;&gt;hanzel/docker-sloppy&lt;/code&gt;. We use the &lt;code class=&quot;highlighter-rouge&quot;&gt;port_mappings&lt;/code&gt; property to tell which port of the container to be used when the URL is accessed.&lt;/p&gt;

&lt;p&gt;Instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;links&lt;/code&gt; property in &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;, we have &lt;code class=&quot;highlighter-rouge&quot;&gt;dependencies&lt;/code&gt;. We will write the &lt;code class=&quot;highlighter-rouge&quot;&gt;backend&lt;/code&gt; service soon and it will have the &lt;code class=&quot;highlighter-rouge&quot;&gt;redis&lt;/code&gt; app. Now, this dependency doesn’t create the environment variable as we had seen in &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Compose&lt;/code&gt;. Rather, the host of the redis instance can be accessed with &lt;code class=&quot;highlighter-rouge&quot;&gt;redis.backend.botleg.{user-name}&lt;/code&gt;. Here change &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;user-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; to your sloppy.io username. This gives the IP for redis app in backend service of botleg project by &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;user-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;. To make our application work, we need to set this as the environment variable &lt;code class=&quot;highlighter-rouge&quot;&gt;REDIS_PORT_6379_TCP_ADDR&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The json configuration for &lt;code class=&quot;highlighter-rouge&quot;&gt;backend&lt;/code&gt; service is given below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;backend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;apps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;redis&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;instances&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;mem&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;redis&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;cmd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;redis-server --appendonly yes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;volumes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;container_path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/data/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;mode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;RW&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;40MB&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We have an app name &lt;code class=&quot;highlighter-rouge&quot;&gt;redis&lt;/code&gt; and we have one 512MB RAM instance of it. The image used in the official &lt;code class=&quot;highlighter-rouge&quot;&gt;redis&lt;/code&gt; image. We start &lt;code class=&quot;highlighter-rouge&quot;&gt;redis-server&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;--appendonly&lt;/code&gt; flag with the &lt;code class=&quot;highlighter-rouge&quot;&gt;command&lt;/code&gt; property. We then set a 40MB docker volume pointing to &lt;code class=&quot;highlighter-rouge&quot;&gt;/data&lt;/code&gt; in the docker image.&lt;/p&gt;

&lt;p&gt;The entire sloppy.json will look like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;project&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;botleg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;services&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;apps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;domain&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;uri&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{subdomain-name}.sloppy.zone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HTTP&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;instances&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;mem&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hanzel/docker-sloppy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;port_mappings&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;container_port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;REDIS_PORT_6379_TCP_ADDR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;redis.backend.botleg.{user-name}&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;../../backend/redis&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;backend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;apps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;redis&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;instances&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;mem&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;redis&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;cmd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;redis-server --appendonly yes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;volumes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;container_path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/data/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;mode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;RW&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;40MB&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To host this project, install sloppy CLI from &lt;a href=&quot;http://sloppy.io/home/documentation/&quot;&gt;here&lt;/a&gt;. Login in with sloppy CLI with &lt;code class=&quot;highlighter-rouge&quot;&gt;sloppy login&lt;/code&gt; command. Type in your sloppy.io username and password. Then come to folder where you have this &lt;code class=&quot;highlighter-rouge&quot;&gt;sloppy.json&lt;/code&gt; and type the command &lt;code class=&quot;highlighter-rouge&quot;&gt;sloppy start sloppy.json&lt;/code&gt;. This will start up the application in a few minutes.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Now, you have seen how easy it is to host Docker images with &lt;a href=&quot;http://sloppy.io/&quot;&gt;sloppy.io&lt;/a&gt;. If you have experience with &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Compose&lt;/code&gt;, you will feel right at home. Even otherwise, it is pretty simple. If you are working with Dockers, a CaaS like sloppy.io will provide you with easy hosting and scaling of the Docker images.&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Jan 2016 21:30:00 +0530</pubDate>
        <link>https://botleg.com/stories/docker-hosting-with-sloppyio/</link>
        <guid isPermaLink="true">https://botleg.com/stories/docker-hosting-with-sloppyio/</guid>
        
        <category>docker</category>
        
        <category>hub</category>
        
        <category>sloppy.io</category>
        
        <category>container</category>
        
        <category>node.js</category>
        
        <category>redis</category>
        
        <category>docker-compose</category>
        
        <category>dockerfile</category>
        
        <category>sloppy.json</category>
        
        
        <category>cloud</category>
        
      </item>
    
      <item>
        <title>Bookmarklet Scripts</title>
        <author><name>Hanzel Jesheen</name></author>
        <description>&lt;p&gt;Bookmarklet allows you to run some script by clicking them after adding those to your browser as bookmarks. When your users click the bookmark, the script runs on the current page that the user is on and that information can be used. In this article, we will see how to create a bookmarklet script to send your current page with some tags via &lt;code class=&quot;highlighter-rouge&quot;&gt;AJAX&lt;/code&gt; requests. We will also look into how to identify and authenticate users who are clicking this bookmarklet. You can see the code for the script &lt;a href=&quot;https://gist.github.com/hanzeljesheen/b056fe4319955ce14b53&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-basic-idea&quot;&gt;The Basic Idea&lt;/h2&gt;
&lt;p&gt;The bookmarklet script is a piece of javascript code that you can save as the bookmark. When the bookmarklet is clicked, the javascript code will be executed. The javascript code will be enclosed in an anonymous function which is called as soon as it’s defined. We enclose the function with parenthesis and prepend it with &lt;code class=&quot;highlighter-rouge&quot;&gt;javascript:&lt;/code&gt; to tell the browser that the code is infact javascript.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;javascript&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// your script here.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is the basic structure of a bookmarklet script and we can minify this to a single line.&lt;/p&gt;

&lt;h2 id=&quot;ajax-request&quot;&gt;AJAX Request&lt;/h2&gt;
&lt;p&gt;One of the basic thing that we need with a bookmarklet script is to send something to a server. This can be done in javascript with AJAX requests. You can read more about AJAX requests &lt;a href=&quot;http://www.w3schools.com/ajax/ajax_xmlhttprequest_send.asp&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;javascript&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;encodeURI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:8080&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  	&lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, we are sending a &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; request to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080&lt;/code&gt;. We can get the current page address with &lt;code class=&quot;highlighter-rouge&quot;&gt;document.location.href&lt;/code&gt; and we are sending this as the body of the POST request.&lt;/p&gt;

&lt;p&gt;One thing to note here is &lt;code class=&quot;highlighter-rouge&quot;&gt;CORS&lt;/code&gt;. The origin of the AJAX request will be from the user’s current page URL, which won’t have the same domain as the the destination of the request. This make the request &lt;code class=&quot;highlighter-rouge&quot;&gt;cross-domain&lt;/code&gt;. For example, if you are clicking the bookmarklet when you are in &lt;code class=&quot;highlighter-rouge&quot;&gt;google.com&lt;/code&gt;, your origin is &lt;code class=&quot;highlighter-rouge&quot;&gt;google.com&lt;/code&gt; and destination is &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost&lt;/code&gt;. To allow such &lt;code class=&quot;highlighter-rouge&quot;&gt;cross-domain&lt;/code&gt; request, the server must set the following headers.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span class=&quot;s&quot;&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*&#39;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;Access-Control-Request-Method&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*&#39;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;Access-Control-Allow-Methods&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;POST&#39;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;Access-Control-Allow-Headers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Content-Type&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;ui-elements&quot;&gt;UI Elements&lt;/h2&gt;
&lt;p&gt;Now that we have sent location of the page, let’s also send some tags that the user can input. For this we need a form with text field and a button, the UI elements. To achieve this with out script, we save the required HTML as a string and add that to out page.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;javascript&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;
    &amp;lt;div id=&quot;bookmarklet&quot; style=&quot;
      position:fixed;
      background: #FFF;
      border: 1px #000 solid;
      right:50px;
      top:50px;
      z-index:1000;
      width:250px;
    &quot;&amp;gt;
    Tag: &amp;lt;input type=&quot;text&quot; id=&quot;tag-input&quot;&amp;gt;
    &amp;lt;button id=&quot;add-tag&quot;&amp;gt;Submit&amp;lt;/button&amp;gt;&amp;lt;/div&amp;gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, we have a &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; with a textfield and a button saved as string in &lt;code class=&quot;highlighter-rouge&quot;&gt;el&lt;/code&gt; variable. This variable is then added to our page and this gives us the HTML elements in the current page. We use the &lt;code class=&quot;highlighter-rouge&quot;&gt;position:fixed&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;z-index:1000&lt;/code&gt; property on the enclosing &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; to make the box floating on top of the current page.&lt;/p&gt;

&lt;p&gt;Make sure that you style all the elements in your UI with custom CSS. Otherwise, these elements will inherit the current page’s CSS properties. That could make your UI look different when opened in different pages.&lt;/p&gt;

&lt;p&gt;Once new elements are added to the current page, we can make the AJAX request with the &lt;code class=&quot;highlighter-rouge&quot;&gt;click&lt;/code&gt; event on the button. To make this happen, add the following to the end of your script, before the anonymous function ends.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;add-tag&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;encodeURI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:8080&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;tag-input&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;bookmarklet&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;authentication&quot;&gt;Authentication&lt;/h2&gt;
&lt;p&gt;If you have a cookie based authenication system and the user has logged in to your site, every request to your site will have the cookie details in its header. We can use that for authentication. There is however a caveat, the browsers don’t send the cookie details for cross-domain AJAX requests by default. So, we need to add the following line before send the &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; request.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;withCredentials&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So the entire code for the bookmarklet script will look like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;javascript&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;
    &amp;lt;div id=&quot;bookmarklet&quot; style=&quot;
      position:fixed;
      background: #FFF;
      border: 1px #000 solid;
      right:50px;
      top:50px;
      z-index:1000;
      width:250px;
    &quot;&amp;gt;
    Tag: &amp;lt;input type=&quot;text&quot; id=&quot;tag-input&quot;&amp;gt;
    &amp;lt;button id=&quot;add-tag&quot;&amp;gt;Submit&amp;lt;/button&amp;gt;&amp;lt;/div&amp;gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;add-tag&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;encodeURI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:8080&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;withCredentials&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;tag-input&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;bookmarklet&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this article, we have seen how to create bookmarklet scripts that can send AJAX requests, create UI elements and even do authentication.&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Dec 2015 23:30:00 +0530</pubDate>
        <link>https://botleg.com/stories/bookmarklet-scripts/</link>
        <guid isPermaLink="true">https://botleg.com/stories/bookmarklet-scripts/</guid>
        
        <category>bookmarklet</category>
        
        <category>script</category>
        
        <category>bookmark</category>
        
        <category>ajax</category>
        
        <category>requests</category>
        
        <category>ui</category>
        
        <category>post</category>
        
        <category>cors</category>
        
        <category>cross-domain</category>
        
        <category>cookie</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Share your localhost</title>
        <author><name>Hanzel Jesheen</name></author>
        <description>&lt;p&gt;A lot of times, we would have to demo our local web development to our teammates, clients, etc. We could deploy the project in the cloud and share its address. These projects generally reside in our &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost&lt;/code&gt;, so it is much easier to make it publicly accessible. In this article, we will go through 3 ways to make a port in localhost available to everyone.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;0.0.0.0&lt;/h2&gt;
&lt;p&gt;For local development, you would have the web server listening to a port in localhost. This &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt; is the local loop-back address. Any requests made to this IP is send back to yourself, so a server in this IP can only be available to you.&lt;/p&gt;

&lt;p&gt;For making it available to others, you can change this IP to &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0.0&lt;/code&gt;. You can easily do this in all web frameworks. In Django, run the command below to set the IP to &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0.0&lt;/code&gt; and port to &lt;code class=&quot;highlighter-rouge&quot;&gt;8000&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;manage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runserver&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For Node.js and Express framework, you can do this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0.0&lt;/code&gt; does is that, it refers to all IPv4 addresses in your local system. So, the server is listening for calls in all the IPs assigned to your system. To find all IPs in the system, use the bash command,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;hostname -I&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You might get private IP address (starting with 10. or 192.168. or 172.16. to 172.31.) or public IP address or both. The private address is available for everyone in the local network and public address is available for everyone. So if your IP is &lt;code class=&quot;highlighter-rouge&quot;&gt;10.12.1.15&lt;/code&gt;, anybody in your local network can access the server at &lt;code class=&quot;highlighter-rouge&quot;&gt;10.12.1.15:8000&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;ssh-remote-port-forward&quot;&gt;SSH Remote Port Forward&lt;/h2&gt;
&lt;p&gt;In the previous &lt;a href=&quot;/stories/tricks-with-ssh/&quot;&gt;article&lt;/a&gt;, we had discussed local port forwarding with SSH. For our purpose here, we use the opposite, i.e. remote port forward. This allows you to forward a port in your local system to a remote host. So, all requests comming to the given port in the remote host will be forwarded to our port in the local system. This works when you have an SSH server that has an publicly accessible IP.&lt;/p&gt;

&lt;p&gt;The command to do this is,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ssh -R 4125:localhost:8000 user@host -N&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-R&lt;/code&gt; flag is for remote port forwarding. Here, we are forwarding the port &lt;code class=&quot;highlighter-rouge&quot;&gt;8000&lt;/code&gt; in our local system to port &lt;code class=&quot;highlighter-rouge&quot;&gt;4125&lt;/code&gt; in the remote SSH host. We have to give the &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;host&lt;/code&gt; of the SSH login next. &lt;code class=&quot;highlighter-rouge&quot;&gt;-N&lt;/code&gt; flag is to prevent the SSH shell from opening up. You can terminate this with &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + C&lt;/code&gt;. If the public IP of the SSH remote host is &lt;code class=&quot;highlighter-rouge&quot;&gt;101.20.30.22&lt;/code&gt;, you can now access the server at &lt;code class=&quot;highlighter-rouge&quot;&gt;101.20.30.22:4125&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One thing to note is that, remote port forwarding in SSH is turned off by default. You can turn it on by adding the following line to &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/sshd_config&lt;/code&gt;,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;GatewayPorts yes&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now restart the SSH service with,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo service ssh restart&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;ngrok&quot;&gt;ngrok&lt;/h2&gt;
&lt;p&gt;If you don’t have a public IP or access to a SSH server that has a public IP, you need to use some third-party application. The best one for this is &lt;a href=&quot;https://ngrok.com/&quot;&gt;ngrok&lt;/a&gt;. It is used to create secure tunnel to your localhost.&lt;/p&gt;

&lt;p&gt;Download ngrok 2.0 from &lt;a href=&quot;https://ngrok.com/download&quot;&gt;here&lt;/a&gt; and unzip it. Then run the following command.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./ngrok http 8000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This generates a &lt;code class=&quot;highlighter-rouge&quot;&gt;ngrok.io&lt;/code&gt; subdomain, that will tunnel to your port 8000. You application can be found at this address. It supports HTTPS. The paid version of the application also allows you to set up custom subdomains.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We have now covered three ways to demo your local application without deploying hassles. Use either &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0.0&lt;/code&gt; IP address, SSH remote port forwarding or ngrok as needed.&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Dec 2015 04:30:00 +0530</pubDate>
        <link>https://botleg.com/stories/share-your-localhost/</link>
        <guid isPermaLink="true">https://botleg.com/stories/share-your-localhost/</guid>
        
        <category>SSH</category>
        
        <category>localhost</category>
        
        <category>0.0.0.0</category>
        
        <category>django</category>
        
        <category>node.js</category>
        
        <category>express</category>
        
        <category>listen</category>
        
        <category>127.0.0.1</category>
        
        <category>remote</category>
        
        <category>port</category>
        
        <category>forward</category>
        
        <category>ngrok</category>
        
        <category>tunnel</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>Tricks with SSH</title>
        <author><name>Hanzel Jesheen</name></author>
        <description>&lt;p&gt;Almost all developers have some sort of experience working with &lt;code class=&quot;highlighter-rouge&quot;&gt;Secure Shell&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;SSH&lt;/code&gt;. It allows you to connect to a remote location and communicate securely. In this article, I’ll share couple of tips that will make working with SSH easier.&lt;/p&gt;

&lt;h2 id=&quot;ssh-config&quot;&gt;SSH Config&lt;/h2&gt;
&lt;p&gt;The basic way of connecting to a remote server is,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ssh user@ip -p 22&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is not easy to remember a bunch of ip addresses and type those in everytime you want to connect to a remote server. SSH allows you to give alias to each connection configuration including hostname, username, port, etc. This is done with &lt;code class=&quot;highlighter-rouge&quot;&gt;SSH Config&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Add a new file, &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/config&lt;/code&gt;. For each connection, add this block to the config file we just created.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;  Host &amp;lt;&lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt;&amp;gt;
    HostName &amp;lt;host-address&amp;gt;
    Port &amp;lt;port&amp;gt;
    User &amp;lt;username&amp;gt;
    IdentityFile &amp;lt;private-key-file&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;IdentityFile&lt;/code&gt; field is optional, and it contains the path of the private key used for identity. An example of this block is given below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;  Host myremote
    HostName 101.102.103.104
    Port 22
    User root
    IdentityFile ~/.ssh/myremote.key&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can log into this remote server with the command,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ssh myremote&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you have copied your key to remote as an authorized key with &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-copy-id&lt;/code&gt;, you will be connected to the remote server. Even tab completion works for the alias names. Pretty convenient, right?&lt;/p&gt;

&lt;h2 id=&quot;local-port-forward&quot;&gt;Local Port Forward&lt;/h2&gt;
&lt;p&gt;SSH can be used to forward ports from a remote server to local system and vice-versa. Now, we’ll talk only about the former, also called local port forwarding. It is generally used to access blocked websites in a network. You can forward any of your local ports to a blocked site, and access it with the assigned local port.&lt;/p&gt;

&lt;p&gt;For instance, you can forward your local port 5000 to &lt;a href=&quot;http://youtube.com&quot;&gt;YouTube&lt;/a&gt; with,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ssh -L 5000:youtube.com:80 user@host&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, you can access YouTube at &lt;a href=&quot;http://localhost:5000&quot;&gt;localhost:5000&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are a couple of other use cases for local port forwarding. The main one is to access services for local development. Most database in the network will only allow access to localhost and remote access will be blocked by the firewall. While it’s good for security, it would make the database inaccessible for local development.&lt;/p&gt;

&lt;p&gt;We can use local port forwarding to solve this issue. Let’s assume, I’ve a &lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt; database running in &lt;code class=&quot;highlighter-rouge&quot;&gt;120.10.20.30:16379&lt;/code&gt;. If I have SSH access to this remote server, I can forward the remote port &lt;code class=&quot;highlighter-rouge&quot;&gt;16379&lt;/code&gt; to any of my local port.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ssh -L 0.0.0.0:5866:120.10.20.30:16379 user@host -Nf&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We will go through all the different things in this command. The &lt;code class=&quot;highlighter-rouge&quot;&gt;-L&lt;/code&gt; flag for the SSH command tells that it’s a local port forward command.&lt;/p&gt;

&lt;p&gt;The basic format of local port forward is,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&amp;lt;&lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt;-ip&amp;gt;:&amp;lt;&lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt;-port&amp;gt;:&amp;lt;remote-ip&amp;gt;:&amp;lt;remote-port&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, the local ip is &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0.0&lt;/code&gt;. What it does is that, it listens to all hosts in the network. So, any host in your network can access the Redis database with your ip. The local port is &lt;code class=&quot;highlighter-rouge&quot;&gt;5866&lt;/code&gt;. If your local ip address is &lt;code class=&quot;highlighter-rouge&quot;&gt;10.18.0.13&lt;/code&gt;, then Redis database can be accessed by anybody in your network at &lt;code class=&quot;highlighter-rouge&quot;&gt;10.18.0.13:5866&lt;/code&gt; and for you, it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:5866&lt;/code&gt;. If your avoid the &lt;code class=&quot;highlighter-rouge&quot;&gt;local-ip&lt;/code&gt; part, only you can access the database.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;remote-port&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;remote-ip&lt;/code&gt; is that of the service, we need to forward. In the case, we are forwarding the database in &lt;code class=&quot;highlighter-rouge&quot;&gt;120.10.20.30:16379&lt;/code&gt;. Now we need to provide the user and host of the remote SSH login. As discussed above, we can replace this with an alias in SSH config.&lt;/p&gt;

&lt;p&gt;There are two more flags in the command and these are very important. &lt;code class=&quot;highlighter-rouge&quot;&gt;-N&lt;/code&gt; flag asks the SSH to NOT execute the remote command. This prevents the remote shell from coming up. ‘-f’ flag makes the SSH to go into the background and excute the command like a daemon. Together, we can the flag &lt;code class=&quot;highlighter-rouge&quot;&gt;-Nf&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this article, I’ve shared two SSH techniques that saved me a lot of time and helped me with tricky situations. The first one involves using a config file for SSH and other one involves local port forwarding.&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Dec 2015 06:30:00 +0530</pubDate>
        <link>https://botleg.com/stories/tricks-with-ssh/</link>
        <guid isPermaLink="true">https://botleg.com/stories/tricks-with-ssh/</guid>
        
        <category>SSH</category>
        
        <category>secure</category>
        
        <category>shell</category>
        
        <category>config</category>
        
        <category>remote</category>
        
        <category>local</category>
        
        <category>port</category>
        
        <category>ip</category>
        
        <category>alias</category>
        
        <category>forward</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>Generators in JavaScript and Python</title>
        <author><name>Hanzel Jesheen</name></author>
        <description>&lt;p&gt;With the introduction of JavaScript ES6 or ES2015, we got a whole lot of new features for the language. Among those, &lt;code class=&quot;highlighter-rouge&quot;&gt;generator&lt;/code&gt; sure is an interesting one. Generator is basically a function which can be paused and resumed as we need it. The state of the generator stays constant while it’s paused. You can read more about this &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generators&quot;&gt;here&lt;/a&gt;. In this article, we are going to compare generators in JavaScript to the ones in a language that has been supporting it for a long time now, Python.&lt;/p&gt;

&lt;p&gt;We will see how to create an &lt;code class=&quot;highlighter-rouge&quot;&gt;iterator&lt;/code&gt; with generator function. Iterator contains a set of values in a sequence. We can go through the elements in an iterator with a &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop. For this example, we will create an iterator for &lt;code class=&quot;highlighter-rouge&quot;&gt;Fibonacci Numbers&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;generator&quot;&gt;Generator&lt;/h2&gt;
&lt;p&gt;Generator is just another function. The only difference is that it can be paused and resumed. While the normal functions use &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; to give back a value and stop its execution, a generator function uses &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; to give a value back and pause the function. We can resume the function with the &lt;code class=&quot;highlighter-rouge&quot;&gt;next()&lt;/code&gt; command and the function will give back the value in the next yield. We can also go through the values in a generator with a loop. The generator functions can also have a &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; statement which can be used to terminate its execution.&lt;/p&gt;

&lt;h2 id=&quot;javascript&quot;&gt;JavaScript&lt;/h2&gt;
&lt;p&gt;In JavaScript, a generator definition contains an &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;. It could also have a yield statement.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getFibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//yield something;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fibonacci_number&quot;&gt;Fibonacci series&lt;/a&gt;, the first two numbers are 0 and 1 and the rest is the sum of previous two values. So, it goes like &lt;code class=&quot;highlighter-rouge&quot;&gt;0, 1, 1, 2, 3, 5, 8, 13, 21, ...&lt;/code&gt;. The code for getting Fibonacci Numbers less than 100 is this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getFibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getFibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that ES6 is required for running this code. We first define the generator function &lt;code class=&quot;highlighter-rouge&quot;&gt;getFibonacci()&lt;/code&gt; with the &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;. The first value in the sequence is &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;, so we have to return that with an yield. We can use an expression with yield statement and the result of the expression is send out with yield. Now we store the previous two values in &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;. The starting values of &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; are &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; respectively, the first two values in the sequence. We can assign value to &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and yield it in a single statement.&lt;/p&gt;

&lt;p&gt;We start an infinite &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loop. We now yield the value in &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;, which is now the second number in the sequence. Now we set &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; to the sum of &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; and set &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; as the previous value of &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;. This can be done simply by,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; will contain the third number in the sequence, which is then given out with yield. This goes on and on with &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; always having the next number in the sequence.&lt;/p&gt;

&lt;p&gt;This generator acts as an iterator factory for Fibonacci Numbers. We can loop through this iterator with the &lt;code class=&quot;highlighter-rouge&quot;&gt;for .. of&lt;/code&gt; loop. As this gives all the Fibonacci Numbers till infinity, we need a &lt;code class=&quot;highlighter-rouge&quot;&gt;break&lt;/code&gt; condition. Here, we take the Fibonacci Numbers less than 100 and logs it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getFibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;python&quot;&gt;Python&lt;/h2&gt;
&lt;p&gt;The python implementation of this same problem is very similar. The code for the solution is this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getFibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getFibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We start with the &lt;code class=&quot;highlighter-rouge&quot;&gt;getFibonacci()&lt;/code&gt; generator function. In python, there is no difference between generators and normal function definition. The only difference is in the appearence of the &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; keyword. We can’t use expressions with yield in Python, as we have done in JavaScript. So, we will yield the first number in the sequence &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; and then assign the initial values to &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As before, we than have an infinite loop which yields the next value in the sequence and calculates new values of &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;. This is same as in JavaScript.&lt;/p&gt;

&lt;p&gt;To loop through the numbers in the &lt;code class=&quot;highlighter-rouge&quot;&gt;getFibonacci()&lt;/code&gt; iterator, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;for .. in&lt;/code&gt; loop. The rest is same as in the case of JavaScript.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Except for some subtle differences, the implementation of generators in JavaScript and Python are really similar. With ES6, we can program in JavaScript as we do it in Java, C, or Python.&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Oct 2015 04:30:00 +0530</pubDate>
        <link>https://botleg.com/stories/generators-in-javascript-and-python/</link>
        <guid isPermaLink="true">https://botleg.com/stories/generators-in-javascript-and-python/</guid>
        
        <category>python</category>
        
        <category>generator</category>
        
        <category>iterator</category>
        
        <category>es6</category>
        
        <category>es2015</category>
        
        <category>fibonacci</category>
        
        <category>yield</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Line numbers in Jekyll code blocks</title>
        <author><name>Hanzel Jesheen</name></author>
        <description>&lt;p&gt;One of the really cool feature of a &lt;a href=&quot;built in support for syntax highlighting&quot;&gt;Jekyll&lt;/a&gt; blog generator is the in-built support for syntax highlighting in code blocks. The styling of the code blocks is really good with the default settings except for one thing, line numbers. In this article, we are going to fix just that.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;
&lt;p&gt;An ordinary code block without line numbers can be made by surrounding your code between &lt;code class=&quot;highlighter-rouge&quot;&gt;highlight&lt;/code&gt; liquid tag. You can also specify the language of the code block as follows.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{% highlight language %}
//  YOUR CODE HERE
{% endhighlight %}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The code block created will look something like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;http&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Web&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To add line numbers to this code block. Just add the keyword &lt;code class=&quot;highlighter-rouge&quot;&gt;linenos&lt;/code&gt; to the highlight tag. If the language of the code is &lt;code class=&quot;highlighter-rouge&quot;&gt;javascript&lt;/code&gt;, the liquid tag will look like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{% highlight javascript linenos %}
//  YOUR CODE HERE
{% endhighlight %}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After adding the line numbers, the code block will look something like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/code-lines@2x.jpg&quot; srcset=&quot;/assets/images/code-lines@1x.jpg 300w, /assets/images/code-lines@2x.jpg 600w, /assets/images/code-lines@3x.jpg 900w&quot; sizes=&quot;(min-width: 960px) 900px, 100vw&quot; alt=&quot;Code Block with line numbers&quot; class=&quot;center-image&quot; /&gt;
&lt;em class=&quot;image-caption&quot;&gt;Code Block with line numbers&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is pretty bad. The line numbers and the code does not have any division and the colour of the line numbers confuses it with the code. Also, when we select the code, the line numbers are also selected.&lt;/p&gt;

&lt;h2 id=&quot;the-tweaks&quot;&gt;The Tweaks&lt;/h2&gt;
&lt;p&gt;We can fix the above problems with a couple of tweaks. We can modify the looks of the line numbers by changing the property of the class &lt;code class=&quot;highlighter-rouge&quot;&gt;.lineno&lt;/code&gt;. We add this class to the &lt;code class=&quot;highlighter-rouge&quot;&gt;_syntax-highlighting.scss&lt;/code&gt; file in our Jekyll project.&lt;/p&gt;

&lt;p&gt;First of all, we will change its colour to something more subtle. Then we add some padding and border.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.lineno&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ccc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline-block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;nl&quot;&gt;border-right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ccc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To prevent the line numbers from being selected when we select the code block, we need to set the &lt;code class=&quot;highlighter-rouge&quot;&gt;user-select&lt;/code&gt; property of &lt;code class=&quot;highlighter-rouge&quot;&gt;.lineno&lt;/code&gt;. With vendor prefixes, it looks like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.lineno&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;nl&quot;&gt;-webkit-touch-callout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;-webkit-user-select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;-khtml-user-select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;-moz-user-select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;-ms-user-select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;user-select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;.linenos&lt;/code&gt; class in &lt;code class=&quot;highlighter-rouge&quot;&gt;_syntax-highlighting.scss&lt;/code&gt; will now look like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.lineno&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ccc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inline-block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;nl&quot;&gt;border-right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ccc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;-webkit-touch-callout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;-webkit-user-select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;-khtml-user-select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;-moz-user-select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;-ms-user-select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;user-select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;By tweaking the &lt;code class=&quot;highlighter-rouge&quot;&gt;.lineno&lt;/code&gt; class, we can add better looking line numbers in Jekyll code blocks. You can also prevent the line numbers from being selected while selecting the code.&lt;/p&gt;
</description>
        <pubDate>Sun, 27 Sep 2015 16:30:00 +0530</pubDate>
        <link>https://botleg.com/stories/line-numbers-in-jekyll-code-blocks/</link>
        <guid isPermaLink="true">https://botleg.com/stories/line-numbers-in-jekyll-code-blocks/</guid>
        
        <category>highlight</category>
        
        
        <category>jekyll</category>
        
      </item>
    
  </channel>
</rss>
